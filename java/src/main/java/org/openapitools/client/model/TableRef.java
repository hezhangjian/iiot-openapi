/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TableRef
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T20:31:18.115216+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class TableRef {
  public static final String SERIALIZED_NAME_TABLE_ID = "table_id";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  @jakarta.annotation.Nullable
  private String tableId;

  public static final String SERIALIZED_NAME_COLUMN_ID = "column_id";
  @SerializedName(SERIALIZED_NAME_COLUMN_ID)
  @jakarta.annotation.Nullable
  private String columnId;

  public static final String SERIALIZED_NAME_WHERE = "where";
  @SerializedName(SERIALIZED_NAME_WHERE)
  @jakarta.annotation.Nullable
  private Map<String, Object> where = new HashMap<>();

  public TableRef() {
  }

  public TableRef tableId(@jakarta.annotation.Nullable String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   * Get tableId
   * @return tableId
   */
  @jakarta.annotation.Nullable
  public String getTableId() {
    return tableId;
  }

  public void setTableId(@jakarta.annotation.Nullable String tableId) {
    this.tableId = tableId;
  }


  public TableRef columnId(@jakarta.annotation.Nullable String columnId) {
    this.columnId = columnId;
    return this;
  }

  /**
   * Get columnId
   * @return columnId
   */
  @jakarta.annotation.Nullable
  public String getColumnId() {
    return columnId;
  }

  public void setColumnId(@jakarta.annotation.Nullable String columnId) {
    this.columnId = columnId;
  }


  public TableRef where(@jakarta.annotation.Nullable Map<String, Object> where) {
    this.where = where;
    return this;
  }

  public TableRef putWhereItem(String key, Object whereItem) {
    if (this.where == null) {
      this.where = new HashMap<>();
    }
    this.where.put(key, whereItem);
    return this;
  }

  /**
   * Get where
   * @return where
   */
  @jakarta.annotation.Nullable
  public Map<String, Object> getWhere() {
    return where;
  }

  public void setWhere(@jakarta.annotation.Nullable Map<String, Object> where) {
    this.where = where;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableRef tableRef = (TableRef) o;
    return Objects.equals(this.tableId, tableRef.tableId) &&
        Objects.equals(this.columnId, tableRef.columnId) &&
        Objects.equals(this.where, tableRef.where);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableId, columnId, where);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableRef {\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    columnId: ").append(toIndentedString(columnId)).append("\n");
    sb.append("    where: ").append(toIndentedString(where)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("table_id");
    openapiFields.add("column_id");
    openapiFields.add("where");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableRef
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableRef.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableRef is not found in the empty JSON string", TableRef.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableRef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableRef` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("table_id") != null && !jsonObj.get("table_id").isJsonNull()) && !jsonObj.get("table_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_id").toString()));
      }
      if ((jsonObj.get("column_id") != null && !jsonObj.get("column_id").isJsonNull()) && !jsonObj.get("column_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableRef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableRef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableRef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableRef.class));

       return (TypeAdapter<T>) new TypeAdapter<TableRef>() {
           @Override
           public void write(JsonWriter out, TableRef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableRef read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableRef given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableRef
   * @throws IOException if the JSON string is invalid with respect to TableRef
   */
  public static TableRef fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableRef.class);
  }

  /**
   * Convert an instance of TableRef to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

