/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ComponentReferenceConfDto;
import org.openapitools.client.model.ReferenceConfDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Thing
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T16:46:47.218966+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class Thing {
  public static final String SERIALIZED_NAME_THING_ID = "thing_id";
  @SerializedName(SERIALIZED_NAME_THING_ID)
  @jakarta.annotation.Nonnull
  private String thingId;

  public static final String SERIALIZED_NAME_THING_NAME = "thing_name";
  @SerializedName(SERIALIZED_NAME_THING_NAME)
  @jakarta.annotation.Nonnull
  private String thingName;

  public static final String SERIALIZED_NAME_MODEL_ID = "model_id";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  @jakarta.annotation.Nonnull
  private String modelId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @jakarta.annotation.Nullable
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @jakarta.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  @jakarta.annotation.Nullable
  private Map<String, ReferenceConfDto> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  @jakarta.annotation.Nullable
  private Map<String, ComponentReferenceConfDto> components = new HashMap<>();

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  @jakarta.annotation.Nullable
  private String createdTime;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  @jakarta.annotation.Nullable
  private String updatedTime;

  public Thing() {
  }

  public Thing thingId(@jakarta.annotation.Nonnull String thingId) {
    this.thingId = thingId;
    return this;
  }

  /**
   * Get thingId
   * @return thingId
   */
  @jakarta.annotation.Nonnull
  public String getThingId() {
    return thingId;
  }

  public void setThingId(@jakarta.annotation.Nonnull String thingId) {
    this.thingId = thingId;
  }


  public Thing thingName(@jakarta.annotation.Nonnull String thingName) {
    this.thingName = thingName;
    return this;
  }

  /**
   * Get thingName
   * @return thingName
   */
  @jakarta.annotation.Nonnull
  public String getThingName() {
    return thingName;
  }

  public void setThingName(@jakarta.annotation.Nonnull String thingName) {
    this.thingName = thingName;
  }


  public Thing modelId(@jakarta.annotation.Nonnull String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * Get modelId
   * @return modelId
   */
  @jakarta.annotation.Nonnull
  public String getModelId() {
    return modelId;
  }

  public void setModelId(@jakarta.annotation.Nonnull String modelId) {
    this.modelId = modelId;
  }


  public Thing tags(@jakarta.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public Thing putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @jakarta.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(@jakarta.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
  }


  public Thing description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public Thing properties(@jakarta.annotation.Nullable Map<String, ReferenceConfDto> properties) {
    this.properties = properties;
    return this;
  }

  public Thing putPropertiesItem(String key, ReferenceConfDto propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @jakarta.annotation.Nullable
  public Map<String, ReferenceConfDto> getProperties() {
    return properties;
  }

  public void setProperties(@jakarta.annotation.Nullable Map<String, ReferenceConfDto> properties) {
    this.properties = properties;
  }


  public Thing components(@jakarta.annotation.Nullable Map<String, ComponentReferenceConfDto> components) {
    this.components = components;
    return this;
  }

  public Thing putComponentsItem(String key, ComponentReferenceConfDto componentsItem) {
    if (this.components == null) {
      this.components = new HashMap<>();
    }
    this.components.put(key, componentsItem);
    return this;
  }

  /**
   * Get components
   * @return components
   */
  @jakarta.annotation.Nullable
  public Map<String, ComponentReferenceConfDto> getComponents() {
    return components;
  }

  public void setComponents(@jakarta.annotation.Nullable Map<String, ComponentReferenceConfDto> components) {
    this.components = components;
  }


  public Thing createdTime(@jakarta.annotation.Nullable String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @jakarta.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(@jakarta.annotation.Nullable String createdTime) {
    this.createdTime = createdTime;
  }


  public Thing updatedTime(@jakarta.annotation.Nullable String updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @jakarta.annotation.Nullable
  public String getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(@jakarta.annotation.Nullable String updatedTime) {
    this.updatedTime = updatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Thing thing = (Thing) o;
    return Objects.equals(this.thingId, thing.thingId) &&
        Objects.equals(this.thingName, thing.thingName) &&
        Objects.equals(this.modelId, thing.modelId) &&
        Objects.equals(this.tags, thing.tags) &&
        Objects.equals(this.description, thing.description) &&
        Objects.equals(this.properties, thing.properties) &&
        Objects.equals(this.components, thing.components) &&
        Objects.equals(this.createdTime, thing.createdTime) &&
        Objects.equals(this.updatedTime, thing.updatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(thingId, thingName, modelId, tags, description, properties, components, createdTime, updatedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Thing {\n");
    sb.append("    thingId: ").append(toIndentedString(thingId)).append("\n");
    sb.append("    thingName: ").append(toIndentedString(thingName)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("thing_id");
    openapiFields.add("thing_name");
    openapiFields.add("model_id");
    openapiFields.add("tags");
    openapiFields.add("description");
    openapiFields.add("properties");
    openapiFields.add("components");
    openapiFields.add("created_time");
    openapiFields.add("updated_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("thing_id");
    openapiRequiredFields.add("thing_name");
    openapiRequiredFields.add("model_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Thing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Thing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Thing is not found in the empty JSON string", Thing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Thing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Thing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Thing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("thing_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thing_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thing_id").toString()));
      }
      if (!jsonObj.get("thing_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thing_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thing_name").toString()));
      }
      if (!jsonObj.get("model_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("created_time") != null && !jsonObj.get("created_time").isJsonNull()) && !jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("updated_time") != null && !jsonObj.get("updated_time").isJsonNull()) && !jsonObj.get("updated_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Thing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Thing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Thing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Thing.class));

       return (TypeAdapter<T>) new TypeAdapter<Thing>() {
           @Override
           public void write(JsonWriter out, Thing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Thing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Thing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Thing
   * @throws IOException if the JSON string is invalid with respect to Thing
   */
  public static Thing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Thing.class);
  }

  /**
   * Convert an instance of Thing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

