/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataSchema;
import org.openapitools.client.model.TableRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PropertyDto
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T20:31:18.115216+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class PropertyDto {
  public static final String SERIALIZED_NAME_PROPERTY_ID = "property_id";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ID)
  @jakarta.annotation.Nonnull
  private String propertyId;

  public static final String SERIALIZED_NAME_PROPERTY_NAME = "property_name";
  @SerializedName(SERIALIZED_NAME_PROPERTY_NAME)
  @jakarta.annotation.Nonnull
  private String propertyName;

  public static final String SERIALIZED_NAME_DATA_SCHEMA = "data_schema";
  @SerializedName(SERIALIZED_NAME_DATA_SCHEMA)
  @jakarta.annotation.Nonnull
  private DataSchema dataSchema;

  public static final String SERIALIZED_NAME_WRITABLE = "writable";
  @SerializedName(SERIALIZED_NAME_WRITABLE)
  @jakarta.annotation.Nullable
  private Boolean writable;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  @jakarta.annotation.Nullable
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @jakarta.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  @jakarta.annotation.Nullable
  private String unit;

  /**
   * Gets or Sets refType
   */
  @JsonAdapter(RefTypeEnum.Adapter.class)
  public enum RefTypeEnum {
    TABLE("table"),
    
    POINT("point"),
    
    PROPERTY("property");

    private String value;

    RefTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefTypeEnum fromValue(String value) {
      for (RefTypeEnum b : RefTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RefTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RefTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RefTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REF_TYPE = "ref_type";
  @SerializedName(SERIALIZED_NAME_REF_TYPE)
  @jakarta.annotation.Nullable
  private RefTypeEnum refType;

  public static final String SERIALIZED_NAME_TABLE_REF = "table_ref";
  @SerializedName(SERIALIZED_NAME_TABLE_REF)
  @jakarta.annotation.Nullable
  private TableRef tableRef;

  public PropertyDto() {
  }

  public PropertyDto propertyId(@jakarta.annotation.Nonnull String propertyId) {
    this.propertyId = propertyId;
    return this;
  }

  /**
   * Get propertyId
   * @return propertyId
   */
  @jakarta.annotation.Nonnull
  public String getPropertyId() {
    return propertyId;
  }

  public void setPropertyId(@jakarta.annotation.Nonnull String propertyId) {
    this.propertyId = propertyId;
  }


  public PropertyDto propertyName(@jakarta.annotation.Nonnull String propertyName) {
    this.propertyName = propertyName;
    return this;
  }

  /**
   * Get propertyName
   * @return propertyName
   */
  @jakarta.annotation.Nonnull
  public String getPropertyName() {
    return propertyName;
  }

  public void setPropertyName(@jakarta.annotation.Nonnull String propertyName) {
    this.propertyName = propertyName;
  }


  public PropertyDto dataSchema(@jakarta.annotation.Nonnull DataSchema dataSchema) {
    this.dataSchema = dataSchema;
    return this;
  }

  /**
   * Get dataSchema
   * @return dataSchema
   */
  @jakarta.annotation.Nonnull
  public DataSchema getDataSchema() {
    return dataSchema;
  }

  public void setDataSchema(@jakarta.annotation.Nonnull DataSchema dataSchema) {
    this.dataSchema = dataSchema;
  }


  public PropertyDto writable(@jakarta.annotation.Nullable Boolean writable) {
    this.writable = writable;
    return this;
  }

  /**
   * Get writable
   * @return writable
   */
  @jakarta.annotation.Nullable
  public Boolean getWritable() {
    return writable;
  }

  public void setWritable(@jakarta.annotation.Nullable Boolean writable) {
    this.writable = writable;
  }


  public PropertyDto categories(@jakarta.annotation.Nullable List<String> categories) {
    this.categories = categories;
    return this;
  }

  public PropertyDto addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @jakarta.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(@jakarta.annotation.Nullable List<String> categories) {
    this.categories = categories;
  }


  public PropertyDto description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public PropertyDto unit(@jakarta.annotation.Nullable String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @jakarta.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(@jakarta.annotation.Nullable String unit) {
    this.unit = unit;
  }


  public PropertyDto refType(@jakarta.annotation.Nullable RefTypeEnum refType) {
    this.refType = refType;
    return this;
  }

  /**
   * Get refType
   * @return refType
   */
  @jakarta.annotation.Nullable
  public RefTypeEnum getRefType() {
    return refType;
  }

  public void setRefType(@jakarta.annotation.Nullable RefTypeEnum refType) {
    this.refType = refType;
  }


  public PropertyDto tableRef(@jakarta.annotation.Nullable TableRef tableRef) {
    this.tableRef = tableRef;
    return this;
  }

  /**
   * Get tableRef
   * @return tableRef
   */
  @jakarta.annotation.Nullable
  public TableRef getTableRef() {
    return tableRef;
  }

  public void setTableRef(@jakarta.annotation.Nullable TableRef tableRef) {
    this.tableRef = tableRef;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyDto propertyDto = (PropertyDto) o;
    return Objects.equals(this.propertyId, propertyDto.propertyId) &&
        Objects.equals(this.propertyName, propertyDto.propertyName) &&
        Objects.equals(this.dataSchema, propertyDto.dataSchema) &&
        Objects.equals(this.writable, propertyDto.writable) &&
        Objects.equals(this.categories, propertyDto.categories) &&
        Objects.equals(this.description, propertyDto.description) &&
        Objects.equals(this.unit, propertyDto.unit) &&
        Objects.equals(this.refType, propertyDto.refType) &&
        Objects.equals(this.tableRef, propertyDto.tableRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyId, propertyName, dataSchema, writable, categories, description, unit, refType, tableRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyDto {\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    propertyName: ").append(toIndentedString(propertyName)).append("\n");
    sb.append("    dataSchema: ").append(toIndentedString(dataSchema)).append("\n");
    sb.append("    writable: ").append(toIndentedString(writable)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    refType: ").append(toIndentedString(refType)).append("\n");
    sb.append("    tableRef: ").append(toIndentedString(tableRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("property_id");
    openapiFields.add("property_name");
    openapiFields.add("data_schema");
    openapiFields.add("writable");
    openapiFields.add("categories");
    openapiFields.add("description");
    openapiFields.add("unit");
    openapiFields.add("ref_type");
    openapiFields.add("table_ref");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("property_id");
    openapiRequiredFields.add("property_name");
    openapiRequiredFields.add("data_schema");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyDto is not found in the empty JSON string", PropertyDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PropertyDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("property_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("property_id").toString()));
      }
      if (!jsonObj.get("property_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("property_name").toString()));
      }
      // validate the required field `data_schema`
      DataSchema.validateJsonElement(jsonObj.get("data_schema"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("ref_type") != null && !jsonObj.get("ref_type").isJsonNull()) && !jsonObj.get("ref_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref_type").toString()));
      }
      // validate the optional field `ref_type`
      if (jsonObj.get("ref_type") != null && !jsonObj.get("ref_type").isJsonNull()) {
        RefTypeEnum.validateJsonElement(jsonObj.get("ref_type"));
      }
      // validate the optional field `table_ref`
      if (jsonObj.get("table_ref") != null && !jsonObj.get("table_ref").isJsonNull()) {
        TableRef.validateJsonElement(jsonObj.get("table_ref"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyDto>() {
           @Override
           public void write(JsonWriter out, PropertyDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyDto
   * @throws IOException if the JSON string is invalid with respect to PropertyDto
   */
  public static PropertyDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyDto.class);
  }

  /**
   * Convert an instance of PropertyDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

