/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TimeSpan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimeSeriesQueryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T08:57:00.546871+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class TimeSeriesQueryRequest {
  public static final String SERIALIZED_NAME_PROPERTY_PATHS = "property_paths";
  @SerializedName(SERIALIZED_NAME_PROPERTY_PATHS)
  @javax.annotation.Nonnull
  private List<String> propertyPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_SPAN = "time_span";
  @SerializedName(SERIALIZED_NAME_TIME_SPAN)
  @javax.annotation.Nonnull
  private TimeSpan timeSpan;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_MARKER = "marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  @javax.annotation.Nullable
  private String marker;

  public TimeSeriesQueryRequest() {
  }

  public TimeSeriesQueryRequest propertyPaths(@javax.annotation.Nonnull List<String> propertyPaths) {
    this.propertyPaths = propertyPaths;
    return this;
  }

  public TimeSeriesQueryRequest addPropertyPathsItem(String propertyPathsItem) {
    if (this.propertyPaths == null) {
      this.propertyPaths = new ArrayList<>();
    }
    this.propertyPaths.add(propertyPathsItem);
    return this;
  }

  /**
   * Get propertyPaths
   * @return propertyPaths
   */
  @javax.annotation.Nonnull
  public List<String> getPropertyPaths() {
    return propertyPaths;
  }

  public void setPropertyPaths(@javax.annotation.Nonnull List<String> propertyPaths) {
    this.propertyPaths = propertyPaths;
  }


  public TimeSeriesQueryRequest timeSpan(@javax.annotation.Nonnull TimeSpan timeSpan) {
    this.timeSpan = timeSpan;
    return this;
  }

  /**
   * Get timeSpan
   * @return timeSpan
   */
  @javax.annotation.Nonnull
  public TimeSpan getTimeSpan() {
    return timeSpan;
  }

  public void setTimeSpan(@javax.annotation.Nonnull TimeSpan timeSpan) {
    this.timeSpan = timeSpan;
  }


  public TimeSeriesQueryRequest limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public TimeSeriesQueryRequest marker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Get marker
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesQueryRequest timeSeriesQueryRequest = (TimeSeriesQueryRequest) o;
    return Objects.equals(this.propertyPaths, timeSeriesQueryRequest.propertyPaths) &&
        Objects.equals(this.timeSpan, timeSeriesQueryRequest.timeSpan) &&
        Objects.equals(this.limit, timeSeriesQueryRequest.limit) &&
        Objects.equals(this.marker, timeSeriesQueryRequest.marker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyPaths, timeSpan, limit, marker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesQueryRequest {\n");
    sb.append("    propertyPaths: ").append(toIndentedString(propertyPaths)).append("\n");
    sb.append("    timeSpan: ").append(toIndentedString(timeSpan)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("property_paths");
    openapiFields.add("time_span");
    openapiFields.add("limit");
    openapiFields.add("marker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("property_paths");
    openapiRequiredFields.add("time_span");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesQueryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesQueryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesQueryRequest is not found in the empty JSON string", TimeSeriesQueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesQueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesQueryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeSeriesQueryRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("property_paths") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("property_paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_paths` to be an array in the JSON string but got `%s`", jsonObj.get("property_paths").toString()));
      }
      // validate the required field `time_span`
      TimeSpan.validateJsonElement(jsonObj.get("time_span"));
      if ((jsonObj.get("marker") != null && !jsonObj.get("marker").isJsonNull()) && !jsonObj.get("marker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesQueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesQueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesQueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesQueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesQueryRequest>() {
           @Override
           public void write(JsonWriter out, TimeSeriesQueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesQueryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesQueryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesQueryRequest
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesQueryRequest
   */
  public static TimeSeriesQueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesQueryRequest.class);
  }

  /**
   * Convert an instance of TimeSeriesQueryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

