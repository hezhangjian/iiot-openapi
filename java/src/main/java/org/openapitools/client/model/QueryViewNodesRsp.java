/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnrichedCatalogNode;
import org.openapitools.client.model.EnrichedThingNode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryViewNodesRsp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T08:57:00.546871+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class QueryViewNodesRsp {
  public static final String SERIALIZED_NAME_LEVEL_ID = "level_id";
  @SerializedName(SERIALIZED_NAME_LEVEL_ID)
  @javax.annotation.Nullable
  private String levelId;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  @javax.annotation.Nullable
  private String nodeId;

  public static final String SERIALIZED_NAME_NODE_NAME = "node_name";
  @SerializedName(SERIALIZED_NAME_NODE_NAME)
  @javax.annotation.Nullable
  private String nodeName;

  public static final String SERIALIZED_NAME_DISPLAY_ORDER = "display_order";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ORDER)
  @javax.annotation.Nullable
  private Integer displayOrder;

  public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  @javax.annotation.Nullable
  private String createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "update_time";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  @javax.annotation.Nullable
  private String updateTime;

  public static final String SERIALIZED_NAME_CATALOG_NODES = "catalog_nodes";
  @SerializedName(SERIALIZED_NAME_CATALOG_NODES)
  @javax.annotation.Nullable
  private List<EnrichedCatalogNode> catalogNodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_THING_NODES = "thing_nodes";
  @SerializedName(SERIALIZED_NAME_THING_NODES)
  @javax.annotation.Nullable
  private List<EnrichedThingNode> thingNodes = new ArrayList<>();

  public QueryViewNodesRsp() {
  }

  public QueryViewNodesRsp levelId(@javax.annotation.Nullable String levelId) {
    this.levelId = levelId;
    return this;
  }

  /**
   * Get levelId
   * @return levelId
   */
  @javax.annotation.Nullable
  public String getLevelId() {
    return levelId;
  }

  public void setLevelId(@javax.annotation.Nullable String levelId) {
    this.levelId = levelId;
  }


  public QueryViewNodesRsp nodeId(@javax.annotation.Nullable String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(@javax.annotation.Nullable String nodeId) {
    this.nodeId = nodeId;
  }


  public QueryViewNodesRsp nodeName(@javax.annotation.Nullable String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

  /**
   * Get nodeName
   * @return nodeName
   */
  @javax.annotation.Nullable
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(@javax.annotation.Nullable String nodeName) {
    this.nodeName = nodeName;
  }


  public QueryViewNodesRsp displayOrder(@javax.annotation.Nullable Integer displayOrder) {
    this.displayOrder = displayOrder;
    return this;
  }

  /**
   * Get displayOrder
   * @return displayOrder
   */
  @javax.annotation.Nullable
  public Integer getDisplayOrder() {
    return displayOrder;
  }

  public void setDisplayOrder(@javax.annotation.Nullable Integer displayOrder) {
    this.displayOrder = displayOrder;
  }


  public QueryViewNodesRsp createTime(@javax.annotation.Nullable String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(@javax.annotation.Nullable String createTime) {
    this.createTime = createTime;
  }


  public QueryViewNodesRsp updateTime(@javax.annotation.Nullable String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(@javax.annotation.Nullable String updateTime) {
    this.updateTime = updateTime;
  }


  public QueryViewNodesRsp catalogNodes(@javax.annotation.Nullable List<EnrichedCatalogNode> catalogNodes) {
    this.catalogNodes = catalogNodes;
    return this;
  }

  public QueryViewNodesRsp addCatalogNodesItem(EnrichedCatalogNode catalogNodesItem) {
    if (this.catalogNodes == null) {
      this.catalogNodes = new ArrayList<>();
    }
    this.catalogNodes.add(catalogNodesItem);
    return this;
  }

  /**
   * Get catalogNodes
   * @return catalogNodes
   */
  @javax.annotation.Nullable
  public List<EnrichedCatalogNode> getCatalogNodes() {
    return catalogNodes;
  }

  public void setCatalogNodes(@javax.annotation.Nullable List<EnrichedCatalogNode> catalogNodes) {
    this.catalogNodes = catalogNodes;
  }


  public QueryViewNodesRsp thingNodes(@javax.annotation.Nullable List<EnrichedThingNode> thingNodes) {
    this.thingNodes = thingNodes;
    return this;
  }

  public QueryViewNodesRsp addThingNodesItem(EnrichedThingNode thingNodesItem) {
    if (this.thingNodes == null) {
      this.thingNodes = new ArrayList<>();
    }
    this.thingNodes.add(thingNodesItem);
    return this;
  }

  /**
   * Get thingNodes
   * @return thingNodes
   */
  @javax.annotation.Nullable
  public List<EnrichedThingNode> getThingNodes() {
    return thingNodes;
  }

  public void setThingNodes(@javax.annotation.Nullable List<EnrichedThingNode> thingNodes) {
    this.thingNodes = thingNodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryViewNodesRsp queryViewNodesRsp = (QueryViewNodesRsp) o;
    return Objects.equals(this.levelId, queryViewNodesRsp.levelId) &&
        Objects.equals(this.nodeId, queryViewNodesRsp.nodeId) &&
        Objects.equals(this.nodeName, queryViewNodesRsp.nodeName) &&
        Objects.equals(this.displayOrder, queryViewNodesRsp.displayOrder) &&
        Objects.equals(this.createTime, queryViewNodesRsp.createTime) &&
        Objects.equals(this.updateTime, queryViewNodesRsp.updateTime) &&
        Objects.equals(this.catalogNodes, queryViewNodesRsp.catalogNodes) &&
        Objects.equals(this.thingNodes, queryViewNodesRsp.thingNodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(levelId, nodeId, nodeName, displayOrder, createTime, updateTime, catalogNodes, thingNodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryViewNodesRsp {\n");
    sb.append("    levelId: ").append(toIndentedString(levelId)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    catalogNodes: ").append(toIndentedString(catalogNodes)).append("\n");
    sb.append("    thingNodes: ").append(toIndentedString(thingNodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("level_id");
    openapiFields.add("node_id");
    openapiFields.add("node_name");
    openapiFields.add("display_order");
    openapiFields.add("create_time");
    openapiFields.add("update_time");
    openapiFields.add("catalog_nodes");
    openapiFields.add("thing_nodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryViewNodesRsp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryViewNodesRsp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryViewNodesRsp is not found in the empty JSON string", QueryViewNodesRsp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryViewNodesRsp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryViewNodesRsp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("level_id") != null && !jsonObj.get("level_id").isJsonNull()) && !jsonObj.get("level_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level_id").toString()));
      }
      if ((jsonObj.get("node_id") != null && !jsonObj.get("node_id").isJsonNull()) && !jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("node_name") != null && !jsonObj.get("node_name").isJsonNull()) && !jsonObj.get("node_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_name").toString()));
      }
      if ((jsonObj.get("create_time") != null && !jsonObj.get("create_time").isJsonNull()) && !jsonObj.get("create_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `create_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("create_time").toString()));
      }
      if ((jsonObj.get("update_time") != null && !jsonObj.get("update_time").isJsonNull()) && !jsonObj.get("update_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `update_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("update_time").toString()));
      }
      if (jsonObj.get("catalog_nodes") != null && !jsonObj.get("catalog_nodes").isJsonNull()) {
        JsonArray jsonArraycatalogNodes = jsonObj.getAsJsonArray("catalog_nodes");
        if (jsonArraycatalogNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("catalog_nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `catalog_nodes` to be an array in the JSON string but got `%s`", jsonObj.get("catalog_nodes").toString()));
          }

          // validate the optional field `catalog_nodes` (array)
          for (int i = 0; i < jsonArraycatalogNodes.size(); i++) {
            EnrichedCatalogNode.validateJsonElement(jsonArraycatalogNodes.get(i));
          };
        }
      }
      if (jsonObj.get("thing_nodes") != null && !jsonObj.get("thing_nodes").isJsonNull()) {
        JsonArray jsonArraythingNodes = jsonObj.getAsJsonArray("thing_nodes");
        if (jsonArraythingNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thing_nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thing_nodes` to be an array in the JSON string but got `%s`", jsonObj.get("thing_nodes").toString()));
          }

          // validate the optional field `thing_nodes` (array)
          for (int i = 0; i < jsonArraythingNodes.size(); i++) {
            EnrichedThingNode.validateJsonElement(jsonArraythingNodes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryViewNodesRsp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryViewNodesRsp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryViewNodesRsp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryViewNodesRsp.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryViewNodesRsp>() {
           @Override
           public void write(JsonWriter out, QueryViewNodesRsp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryViewNodesRsp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryViewNodesRsp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryViewNodesRsp
   * @throws IOException if the JSON string is invalid with respect to QueryViewNodesRsp
   */
  public static QueryViewNodesRsp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryViewNodesRsp.class);
  }

  /**
   * Convert an instance of QueryViewNodesRsp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

