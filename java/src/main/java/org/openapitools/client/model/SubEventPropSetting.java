/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventGenExpression;
import org.openapitools.client.model.EventTrigger;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubEventPropSetting
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T20:31:18.115216+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class SubEventPropSetting {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @jakarta.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_START_TRIGGER = "start_trigger";
  @SerializedName(SERIALIZED_NAME_START_TRIGGER)
  @jakarta.annotation.Nonnull
  private EventTrigger startTrigger;

  public static final String SERIALIZED_NAME_END_TRIGGER = "end_trigger";
  @SerializedName(SERIALIZED_NAME_END_TRIGGER)
  @jakarta.annotation.Nullable
  private EventTrigger endTrigger;

  public static final String SERIALIZED_NAME_EXPRESSIONS = "expressions";
  @SerializedName(SERIALIZED_NAME_EXPRESSIONS)
  @jakarta.annotation.Nullable
  private List<EventGenExpression> expressions = new ArrayList<>();

  public SubEventPropSetting() {
  }

  public SubEventPropSetting name(@jakarta.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }


  public SubEventPropSetting startTrigger(@jakarta.annotation.Nonnull EventTrigger startTrigger) {
    this.startTrigger = startTrigger;
    return this;
  }

  /**
   * Get startTrigger
   * @return startTrigger
   */
  @jakarta.annotation.Nonnull
  public EventTrigger getStartTrigger() {
    return startTrigger;
  }

  public void setStartTrigger(@jakarta.annotation.Nonnull EventTrigger startTrigger) {
    this.startTrigger = startTrigger;
  }


  public SubEventPropSetting endTrigger(@jakarta.annotation.Nullable EventTrigger endTrigger) {
    this.endTrigger = endTrigger;
    return this;
  }

  /**
   * Get endTrigger
   * @return endTrigger
   */
  @jakarta.annotation.Nullable
  public EventTrigger getEndTrigger() {
    return endTrigger;
  }

  public void setEndTrigger(@jakarta.annotation.Nullable EventTrigger endTrigger) {
    this.endTrigger = endTrigger;
  }


  public SubEventPropSetting expressions(@jakarta.annotation.Nullable List<EventGenExpression> expressions) {
    this.expressions = expressions;
    return this;
  }

  public SubEventPropSetting addExpressionsItem(EventGenExpression expressionsItem) {
    if (this.expressions == null) {
      this.expressions = new ArrayList<>();
    }
    this.expressions.add(expressionsItem);
    return this;
  }

  /**
   * Get expressions
   * @return expressions
   */
  @jakarta.annotation.Nullable
  public List<EventGenExpression> getExpressions() {
    return expressions;
  }

  public void setExpressions(@jakarta.annotation.Nullable List<EventGenExpression> expressions) {
    this.expressions = expressions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubEventPropSetting subEventPropSetting = (SubEventPropSetting) o;
    return Objects.equals(this.name, subEventPropSetting.name) &&
        Objects.equals(this.startTrigger, subEventPropSetting.startTrigger) &&
        Objects.equals(this.endTrigger, subEventPropSetting.endTrigger) &&
        Objects.equals(this.expressions, subEventPropSetting.expressions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, startTrigger, endTrigger, expressions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubEventPropSetting {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startTrigger: ").append(toIndentedString(startTrigger)).append("\n");
    sb.append("    endTrigger: ").append(toIndentedString(endTrigger)).append("\n");
    sb.append("    expressions: ").append(toIndentedString(expressions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("start_trigger");
    openapiFields.add("end_trigger");
    openapiFields.add("expressions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("start_trigger");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubEventPropSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubEventPropSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubEventPropSetting is not found in the empty JSON string", SubEventPropSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubEventPropSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubEventPropSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubEventPropSetting.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `start_trigger`
      EventTrigger.validateJsonElement(jsonObj.get("start_trigger"));
      // validate the optional field `end_trigger`
      if (jsonObj.get("end_trigger") != null && !jsonObj.get("end_trigger").isJsonNull()) {
        EventTrigger.validateJsonElement(jsonObj.get("end_trigger"));
      }
      if (jsonObj.get("expressions") != null && !jsonObj.get("expressions").isJsonNull()) {
        JsonArray jsonArrayexpressions = jsonObj.getAsJsonArray("expressions");
        if (jsonArrayexpressions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expressions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expressions` to be an array in the JSON string but got `%s`", jsonObj.get("expressions").toString()));
          }

          // validate the optional field `expressions` (array)
          for (int i = 0; i < jsonArrayexpressions.size(); i++) {
            EventGenExpression.validateJsonElement(jsonArrayexpressions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubEventPropSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubEventPropSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubEventPropSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubEventPropSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<SubEventPropSetting>() {
           @Override
           public void write(JsonWriter out, SubEventPropSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubEventPropSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubEventPropSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubEventPropSetting
   * @throws IOException if the JSON string is invalid with respect to SubEventPropSetting
   */
  public static SubEventPropSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubEventPropSetting.class);
  }

  /**
   * Convert an instance of SubEventPropSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

