/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CleanSettings;
import org.openapitools.client.model.ComplexSetting;
import org.openapitools.client.model.EventGenSetting;
import org.openapitools.client.model.ExpressionSettings;
import org.openapitools.client.model.TagMatcher;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnalysisTaskReq
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-27T18:38:37.514966+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class CreateAnalysisTaskReq {
  public static final String SERIALIZED_NAME_CLEAN_SETTINGS = "clean_settings";
  @SerializedName(SERIALIZED_NAME_CLEAN_SETTINGS)
  @jakarta.annotation.Nullable
  private CleanSettings cleanSettings;

  public static final String SERIALIZED_NAME_EVENT_CLASS = "event_class";
  @SerializedName(SERIALIZED_NAME_EVENT_CLASS)
  @jakarta.annotation.Nullable
  private String eventClass;

  public static final String SERIALIZED_NAME_EVENT_GEN_SETTINGS = "event_gen_settings";
  @SerializedName(SERIALIZED_NAME_EVENT_GEN_SETTINGS)
  @jakarta.annotation.Nullable
  private EventGenSetting eventGenSettings;

  public static final String SERIALIZED_NAME_COMPLEX_SETTINGS = "complex_settings";
  @SerializedName(SERIALIZED_NAME_COMPLEX_SETTINGS)
  @jakarta.annotation.Nullable
  private ComplexSetting complexSettings;

  public static final String SERIALIZED_NAME_EXPRESSION_SETTINGS = "expression_settings";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_SETTINGS)
  @jakarta.annotation.Nullable
  private ExpressionSettings expressionSettings;

  public static final String SERIALIZED_NAME_TASK_NAME = "task_name";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  @jakarta.annotation.Nonnull
  private String taskName;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @jakarta.annotation.Nonnull
  private Boolean enabled;

  public static final String SERIALIZED_NAME_CALC_TYPE = "calc_type";
  @SerializedName(SERIALIZED_NAME_CALC_TYPE)
  @jakarta.annotation.Nonnull
  private String calcType;

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "schedule_type";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  @jakarta.annotation.Nonnull
  private String scheduleType;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  @jakarta.annotation.Nullable
  private String period;

  public static final String SERIALIZED_NAME_TAG_MATCHERS = "tag_matchers";
  @SerializedName(SERIALIZED_NAME_TAG_MATCHERS)
  @jakarta.annotation.Nullable
  private List<TagMatcher> tagMatchers = new ArrayList<>();

  public CreateAnalysisTaskReq() {
  }

  public CreateAnalysisTaskReq cleanSettings(@jakarta.annotation.Nullable CleanSettings cleanSettings) {
    this.cleanSettings = cleanSettings;
    return this;
  }

  /**
   * Get cleanSettings
   * @return cleanSettings
   */
  @jakarta.annotation.Nullable
  public CleanSettings getCleanSettings() {
    return cleanSettings;
  }

  public void setCleanSettings(@jakarta.annotation.Nullable CleanSettings cleanSettings) {
    this.cleanSettings = cleanSettings;
  }


  public CreateAnalysisTaskReq eventClass(@jakarta.annotation.Nullable String eventClass) {
    this.eventClass = eventClass;
    return this;
  }

  /**
   * Get eventClass
   * @return eventClass
   */
  @jakarta.annotation.Nullable
  public String getEventClass() {
    return eventClass;
  }

  public void setEventClass(@jakarta.annotation.Nullable String eventClass) {
    this.eventClass = eventClass;
  }


  public CreateAnalysisTaskReq eventGenSettings(@jakarta.annotation.Nullable EventGenSetting eventGenSettings) {
    this.eventGenSettings = eventGenSettings;
    return this;
  }

  /**
   * Get eventGenSettings
   * @return eventGenSettings
   */
  @jakarta.annotation.Nullable
  public EventGenSetting getEventGenSettings() {
    return eventGenSettings;
  }

  public void setEventGenSettings(@jakarta.annotation.Nullable EventGenSetting eventGenSettings) {
    this.eventGenSettings = eventGenSettings;
  }


  public CreateAnalysisTaskReq complexSettings(@jakarta.annotation.Nullable ComplexSetting complexSettings) {
    this.complexSettings = complexSettings;
    return this;
  }

  /**
   * Get complexSettings
   * @return complexSettings
   */
  @jakarta.annotation.Nullable
  public ComplexSetting getComplexSettings() {
    return complexSettings;
  }

  public void setComplexSettings(@jakarta.annotation.Nullable ComplexSetting complexSettings) {
    this.complexSettings = complexSettings;
  }


  public CreateAnalysisTaskReq expressionSettings(@jakarta.annotation.Nullable ExpressionSettings expressionSettings) {
    this.expressionSettings = expressionSettings;
    return this;
  }

  /**
   * Get expressionSettings
   * @return expressionSettings
   */
  @jakarta.annotation.Nullable
  public ExpressionSettings getExpressionSettings() {
    return expressionSettings;
  }

  public void setExpressionSettings(@jakarta.annotation.Nullable ExpressionSettings expressionSettings) {
    this.expressionSettings = expressionSettings;
  }


  public CreateAnalysisTaskReq taskName(@jakarta.annotation.Nonnull String taskName) {
    this.taskName = taskName;
    return this;
  }

  /**
   * Get taskName
   * @return taskName
   */
  @jakarta.annotation.Nonnull
  public String getTaskName() {
    return taskName;
  }

  public void setTaskName(@jakarta.annotation.Nonnull String taskName) {
    this.taskName = taskName;
  }


  public CreateAnalysisTaskReq enabled(@jakarta.annotation.Nonnull Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @jakarta.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@jakarta.annotation.Nonnull Boolean enabled) {
    this.enabled = enabled;
  }


  public CreateAnalysisTaskReq calcType(@jakarta.annotation.Nonnull String calcType) {
    this.calcType = calcType;
    return this;
  }

  /**
   * Get calcType
   * @return calcType
   */
  @jakarta.annotation.Nonnull
  public String getCalcType() {
    return calcType;
  }

  public void setCalcType(@jakarta.annotation.Nonnull String calcType) {
    this.calcType = calcType;
  }


  public CreateAnalysisTaskReq scheduleType(@jakarta.annotation.Nonnull String scheduleType) {
    this.scheduleType = scheduleType;
    return this;
  }

  /**
   * Get scheduleType
   * @return scheduleType
   */
  @jakarta.annotation.Nonnull
  public String getScheduleType() {
    return scheduleType;
  }

  public void setScheduleType(@jakarta.annotation.Nonnull String scheduleType) {
    this.scheduleType = scheduleType;
  }


  public CreateAnalysisTaskReq period(@jakarta.annotation.Nullable String period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @jakarta.annotation.Nullable
  public String getPeriod() {
    return period;
  }

  public void setPeriod(@jakarta.annotation.Nullable String period) {
    this.period = period;
  }


  public CreateAnalysisTaskReq tagMatchers(@jakarta.annotation.Nullable List<TagMatcher> tagMatchers) {
    this.tagMatchers = tagMatchers;
    return this;
  }

  public CreateAnalysisTaskReq addTagMatchersItem(TagMatcher tagMatchersItem) {
    if (this.tagMatchers == null) {
      this.tagMatchers = new ArrayList<>();
    }
    this.tagMatchers.add(tagMatchersItem);
    return this;
  }

  /**
   * Get tagMatchers
   * @return tagMatchers
   */
  @jakarta.annotation.Nullable
  public List<TagMatcher> getTagMatchers() {
    return tagMatchers;
  }

  public void setTagMatchers(@jakarta.annotation.Nullable List<TagMatcher> tagMatchers) {
    this.tagMatchers = tagMatchers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnalysisTaskReq createAnalysisTaskReq = (CreateAnalysisTaskReq) o;
    return Objects.equals(this.cleanSettings, createAnalysisTaskReq.cleanSettings) &&
        Objects.equals(this.eventClass, createAnalysisTaskReq.eventClass) &&
        Objects.equals(this.eventGenSettings, createAnalysisTaskReq.eventGenSettings) &&
        Objects.equals(this.complexSettings, createAnalysisTaskReq.complexSettings) &&
        Objects.equals(this.expressionSettings, createAnalysisTaskReq.expressionSettings) &&
        Objects.equals(this.taskName, createAnalysisTaskReq.taskName) &&
        Objects.equals(this.enabled, createAnalysisTaskReq.enabled) &&
        Objects.equals(this.calcType, createAnalysisTaskReq.calcType) &&
        Objects.equals(this.scheduleType, createAnalysisTaskReq.scheduleType) &&
        Objects.equals(this.period, createAnalysisTaskReq.period) &&
        Objects.equals(this.tagMatchers, createAnalysisTaskReq.tagMatchers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cleanSettings, eventClass, eventGenSettings, complexSettings, expressionSettings, taskName, enabled, calcType, scheduleType, period, tagMatchers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnalysisTaskReq {\n");
    sb.append("    cleanSettings: ").append(toIndentedString(cleanSettings)).append("\n");
    sb.append("    eventClass: ").append(toIndentedString(eventClass)).append("\n");
    sb.append("    eventGenSettings: ").append(toIndentedString(eventGenSettings)).append("\n");
    sb.append("    complexSettings: ").append(toIndentedString(complexSettings)).append("\n");
    sb.append("    expressionSettings: ").append(toIndentedString(expressionSettings)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    calcType: ").append(toIndentedString(calcType)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    tagMatchers: ").append(toIndentedString(tagMatchers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clean_settings");
    openapiFields.add("event_class");
    openapiFields.add("event_gen_settings");
    openapiFields.add("complex_settings");
    openapiFields.add("expression_settings");
    openapiFields.add("task_name");
    openapiFields.add("enabled");
    openapiFields.add("calc_type");
    openapiFields.add("schedule_type");
    openapiFields.add("period");
    openapiFields.add("tag_matchers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("task_name");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("calc_type");
    openapiRequiredFields.add("schedule_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnalysisTaskReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnalysisTaskReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnalysisTaskReq is not found in the empty JSON string", CreateAnalysisTaskReq.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnalysisTaskReq.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnalysisTaskReq` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnalysisTaskReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clean_settings`
      if (jsonObj.get("clean_settings") != null && !jsonObj.get("clean_settings").isJsonNull()) {
        CleanSettings.validateJsonElement(jsonObj.get("clean_settings"));
      }
      if ((jsonObj.get("event_class") != null && !jsonObj.get("event_class").isJsonNull()) && !jsonObj.get("event_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_class").toString()));
      }
      // validate the optional field `event_gen_settings`
      if (jsonObj.get("event_gen_settings") != null && !jsonObj.get("event_gen_settings").isJsonNull()) {
        EventGenSetting.validateJsonElement(jsonObj.get("event_gen_settings"));
      }
      // validate the optional field `complex_settings`
      if (jsonObj.get("complex_settings") != null && !jsonObj.get("complex_settings").isJsonNull()) {
        ComplexSetting.validateJsonElement(jsonObj.get("complex_settings"));
      }
      // validate the optional field `expression_settings`
      if (jsonObj.get("expression_settings") != null && !jsonObj.get("expression_settings").isJsonNull()) {
        ExpressionSettings.validateJsonElement(jsonObj.get("expression_settings"));
      }
      if (!jsonObj.get("task_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_name").toString()));
      }
      if (!jsonObj.get("calc_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calc_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calc_type").toString()));
      }
      if (!jsonObj.get("schedule_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_type").toString()));
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if (jsonObj.get("tag_matchers") != null && !jsonObj.get("tag_matchers").isJsonNull()) {
        JsonArray jsonArraytagMatchers = jsonObj.getAsJsonArray("tag_matchers");
        if (jsonArraytagMatchers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tag_matchers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tag_matchers` to be an array in the JSON string but got `%s`", jsonObj.get("tag_matchers").toString()));
          }

          // validate the optional field `tag_matchers` (array)
          for (int i = 0; i < jsonArraytagMatchers.size(); i++) {
            TagMatcher.validateJsonElement(jsonArraytagMatchers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnalysisTaskReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnalysisTaskReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnalysisTaskReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnalysisTaskReq.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnalysisTaskReq>() {
           @Override
           public void write(JsonWriter out, CreateAnalysisTaskReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnalysisTaskReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnalysisTaskReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnalysisTaskReq
   * @throws IOException if the JSON string is invalid with respect to CreateAnalysisTaskReq
   */
  public static CreateAnalysisTaskReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnalysisTaskReq.class);
  }

  /**
   * Convert an instance of CreateAnalysisTaskReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

