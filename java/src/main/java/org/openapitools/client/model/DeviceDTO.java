/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceDTO
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T16:46:47.218966+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class DeviceDTO {
  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  @jakarta.annotation.Nullable
  private String deviceId;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "device_name";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  @jakarta.annotation.Nullable
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "device_type";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  @jakarta.annotation.Nullable
  private String deviceType;

  public static final String SERIALIZED_NAME_DEVICE_STATUS = "device_status";
  @SerializedName(SERIALIZED_NAME_DEVICE_STATUS)
  @jakarta.annotation.Nullable
  private String deviceStatus;

  public static final String SERIALIZED_NAME_THING_NAME = "thing_name";
  @SerializedName(SERIALIZED_NAME_THING_NAME)
  @jakarta.annotation.Nullable
  private String thingName;

  public static final String SERIALIZED_NAME_MODEL_ID = "model_id";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  @jakarta.annotation.Nullable
  private String modelId;

  public static final String SERIALIZED_NAME_MODEL_NAME = "model_name";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  @jakarta.annotation.Nullable
  private String modelName;

  public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  @jakarta.annotation.Nullable
  private String createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "update_time";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  @jakarta.annotation.Nullable
  private String updateTime;

  public DeviceDTO() {
  }

  public DeviceDTO deviceId(@jakarta.annotation.Nullable String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Get deviceId
   * @return deviceId
   */
  @jakarta.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(@jakarta.annotation.Nullable String deviceId) {
    this.deviceId = deviceId;
  }


  public DeviceDTO deviceName(@jakarta.annotation.Nullable String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Get deviceName
   * @return deviceName
   */
  @jakarta.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(@jakarta.annotation.Nullable String deviceName) {
    this.deviceName = deviceName;
  }


  public DeviceDTO deviceType(@jakarta.annotation.Nullable String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Get deviceType
   * @return deviceType
   */
  @jakarta.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(@jakarta.annotation.Nullable String deviceType) {
    this.deviceType = deviceType;
  }


  public DeviceDTO deviceStatus(@jakarta.annotation.Nullable String deviceStatus) {
    this.deviceStatus = deviceStatus;
    return this;
  }

  /**
   * Get deviceStatus
   * @return deviceStatus
   */
  @jakarta.annotation.Nullable
  public String getDeviceStatus() {
    return deviceStatus;
  }

  public void setDeviceStatus(@jakarta.annotation.Nullable String deviceStatus) {
    this.deviceStatus = deviceStatus;
  }


  public DeviceDTO thingName(@jakarta.annotation.Nullable String thingName) {
    this.thingName = thingName;
    return this;
  }

  /**
   * Get thingName
   * @return thingName
   */
  @jakarta.annotation.Nullable
  public String getThingName() {
    return thingName;
  }

  public void setThingName(@jakarta.annotation.Nullable String thingName) {
    this.thingName = thingName;
  }


  public DeviceDTO modelId(@jakarta.annotation.Nullable String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * Get modelId
   * @return modelId
   */
  @jakarta.annotation.Nullable
  public String getModelId() {
    return modelId;
  }

  public void setModelId(@jakarta.annotation.Nullable String modelId) {
    this.modelId = modelId;
  }


  public DeviceDTO modelName(@jakarta.annotation.Nullable String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Get modelName
   * @return modelName
   */
  @jakarta.annotation.Nullable
  public String getModelName() {
    return modelName;
  }

  public void setModelName(@jakarta.annotation.Nullable String modelName) {
    this.modelName = modelName;
  }


  public DeviceDTO createTime(@jakarta.annotation.Nullable String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @jakarta.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(@jakarta.annotation.Nullable String createTime) {
    this.createTime = createTime;
  }


  public DeviceDTO updateTime(@jakarta.annotation.Nullable String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @jakarta.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(@jakarta.annotation.Nullable String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceDTO deviceDTO = (DeviceDTO) o;
    return Objects.equals(this.deviceId, deviceDTO.deviceId) &&
        Objects.equals(this.deviceName, deviceDTO.deviceName) &&
        Objects.equals(this.deviceType, deviceDTO.deviceType) &&
        Objects.equals(this.deviceStatus, deviceDTO.deviceStatus) &&
        Objects.equals(this.thingName, deviceDTO.thingName) &&
        Objects.equals(this.modelId, deviceDTO.modelId) &&
        Objects.equals(this.modelName, deviceDTO.modelName) &&
        Objects.equals(this.createTime, deviceDTO.createTime) &&
        Objects.equals(this.updateTime, deviceDTO.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceId, deviceName, deviceType, deviceStatus, thingName, modelId, modelName, createTime, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceDTO {\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    deviceStatus: ").append(toIndentedString(deviceStatus)).append("\n");
    sb.append("    thingName: ").append(toIndentedString(thingName)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_id");
    openapiFields.add("device_name");
    openapiFields.add("device_type");
    openapiFields.add("device_status");
    openapiFields.add("thing_name");
    openapiFields.add("model_id");
    openapiFields.add("model_name");
    openapiFields.add("create_time");
    openapiFields.add("update_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceDTO is not found in the empty JSON string", DeviceDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("device_id") != null && !jsonObj.get("device_id").isJsonNull()) && !jsonObj.get("device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_id").toString()));
      }
      if ((jsonObj.get("device_name") != null && !jsonObj.get("device_name").isJsonNull()) && !jsonObj.get("device_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_name").toString()));
      }
      if ((jsonObj.get("device_type") != null && !jsonObj.get("device_type").isJsonNull()) && !jsonObj.get("device_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_type").toString()));
      }
      if ((jsonObj.get("device_status") != null && !jsonObj.get("device_status").isJsonNull()) && !jsonObj.get("device_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_status").toString()));
      }
      if ((jsonObj.get("thing_name") != null && !jsonObj.get("thing_name").isJsonNull()) && !jsonObj.get("thing_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thing_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thing_name").toString()));
      }
      if ((jsonObj.get("model_id") != null && !jsonObj.get("model_id").isJsonNull()) && !jsonObj.get("model_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_id").toString()));
      }
      if ((jsonObj.get("model_name") != null && !jsonObj.get("model_name").isJsonNull()) && !jsonObj.get("model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_name").toString()));
      }
      if ((jsonObj.get("create_time") != null && !jsonObj.get("create_time").isJsonNull()) && !jsonObj.get("create_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `create_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("create_time").toString()));
      }
      if ((jsonObj.get("update_time") != null && !jsonObj.get("update_time").isJsonNull()) && !jsonObj.get("update_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `update_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("update_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceDTO>() {
           @Override
           public void write(JsonWriter out, DeviceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceDTO
   * @throws IOException if the JSON string is invalid with respect to DeviceDTO
   */
  public static DeviceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceDTO.class);
  }

  /**
   * Convert an instance of DeviceDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

