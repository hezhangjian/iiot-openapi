/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AgingSettings;
import org.openapitools.client.model.UpdateTableSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateTableRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T16:46:47.218966+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class UpdateTableRequest {
  public static final String SERIALIZED_NAME_TABLE_NAME = "table_name";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  @jakarta.annotation.Nullable
  private String tableName;

  public static final String SERIALIZED_NAME_CATALOG_ID = "catalog_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  @jakarta.annotation.Nullable
  private String catalogId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @jakarta.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_TABLE_SCHEMA = "table_schema";
  @SerializedName(SERIALIZED_NAME_TABLE_SCHEMA)
  @jakarta.annotation.Nullable
  private UpdateTableSchema tableSchema;

  public static final String SERIALIZED_NAME_AGING_SETTINGS = "aging_settings";
  @SerializedName(SERIALIZED_NAME_AGING_SETTINGS)
  @jakarta.annotation.Nullable
  private AgingSettings agingSettings;

  public UpdateTableRequest() {
  }

  public UpdateTableRequest tableName(@jakarta.annotation.Nullable String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @jakarta.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(@jakarta.annotation.Nullable String tableName) {
    this.tableName = tableName;
  }


  public UpdateTableRequest catalogId(@jakarta.annotation.Nullable String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * Get catalogId
   * @return catalogId
   */
  @jakarta.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(@jakarta.annotation.Nullable String catalogId) {
    this.catalogId = catalogId;
  }


  public UpdateTableRequest description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateTableRequest tableSchema(@jakarta.annotation.Nullable UpdateTableSchema tableSchema) {
    this.tableSchema = tableSchema;
    return this;
  }

  /**
   * Get tableSchema
   * @return tableSchema
   */
  @jakarta.annotation.Nullable
  public UpdateTableSchema getTableSchema() {
    return tableSchema;
  }

  public void setTableSchema(@jakarta.annotation.Nullable UpdateTableSchema tableSchema) {
    this.tableSchema = tableSchema;
  }


  public UpdateTableRequest agingSettings(@jakarta.annotation.Nullable AgingSettings agingSettings) {
    this.agingSettings = agingSettings;
    return this;
  }

  /**
   * Get agingSettings
   * @return agingSettings
   */
  @jakarta.annotation.Nullable
  public AgingSettings getAgingSettings() {
    return agingSettings;
  }

  public void setAgingSettings(@jakarta.annotation.Nullable AgingSettings agingSettings) {
    this.agingSettings = agingSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTableRequest updateTableRequest = (UpdateTableRequest) o;
    return Objects.equals(this.tableName, updateTableRequest.tableName) &&
        Objects.equals(this.catalogId, updateTableRequest.catalogId) &&
        Objects.equals(this.description, updateTableRequest.description) &&
        Objects.equals(this.tableSchema, updateTableRequest.tableSchema) &&
        Objects.equals(this.agingSettings, updateTableRequest.agingSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, catalogId, description, tableSchema, agingSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTableRequest {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tableSchema: ").append(toIndentedString(tableSchema)).append("\n");
    sb.append("    agingSettings: ").append(toIndentedString(agingSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("table_name");
    openapiFields.add("catalog_id");
    openapiFields.add("description");
    openapiFields.add("table_schema");
    openapiFields.add("aging_settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTableRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTableRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTableRequest is not found in the empty JSON string", UpdateTableRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTableRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTableRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("table_name") != null && !jsonObj.get("table_name").isJsonNull()) && !jsonObj.get("table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_name").toString()));
      }
      if ((jsonObj.get("catalog_id") != null && !jsonObj.get("catalog_id").isJsonNull()) && !jsonObj.get("catalog_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `table_schema`
      if (jsonObj.get("table_schema") != null && !jsonObj.get("table_schema").isJsonNull()) {
        UpdateTableSchema.validateJsonElement(jsonObj.get("table_schema"));
      }
      // validate the optional field `aging_settings`
      if (jsonObj.get("aging_settings") != null && !jsonObj.get("aging_settings").isJsonNull()) {
        AgingSettings.validateJsonElement(jsonObj.get("aging_settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTableRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTableRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTableRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTableRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTableRequest>() {
           @Override
           public void write(JsonWriter out, UpdateTableRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTableRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTableRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTableRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateTableRequest
   */
  public static UpdateTableRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTableRequest.class);
  }

  /**
   * Convert an instance of UpdateTableRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

