/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DataList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimeSeriesQueryResponse
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T20:31:18.115216+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class TimeSeriesQueryResponse {
  public static final String SERIALIZED_NAME_THING_ID = "thing_id";
  @SerializedName(SERIALIZED_NAME_THING_ID)
  @jakarta.annotation.Nullable
  private String thingId;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @jakarta.annotation.Nullable
  private Map<String, DataList> data = new HashMap<>();

  public static final String SERIALIZED_NAME_PAGE_INFO = "page_info";
  @SerializedName(SERIALIZED_NAME_PAGE_INFO)
  @jakarta.annotation.Nullable
  private Map<String, Object> pageInfo = new HashMap<>();

  public TimeSeriesQueryResponse() {
  }

  public TimeSeriesQueryResponse thingId(@jakarta.annotation.Nullable String thingId) {
    this.thingId = thingId;
    return this;
  }

  /**
   * Get thingId
   * @return thingId
   */
  @jakarta.annotation.Nullable
  public String getThingId() {
    return thingId;
  }

  public void setThingId(@jakarta.annotation.Nullable String thingId) {
    this.thingId = thingId;
  }


  public TimeSeriesQueryResponse data(@jakarta.annotation.Nullable Map<String, DataList> data) {
    this.data = data;
    return this;
  }

  public TimeSeriesQueryResponse putDataItem(String key, DataList dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @jakarta.annotation.Nullable
  public Map<String, DataList> getData() {
    return data;
  }

  public void setData(@jakarta.annotation.Nullable Map<String, DataList> data) {
    this.data = data;
  }


  public TimeSeriesQueryResponse pageInfo(@jakarta.annotation.Nullable Map<String, Object> pageInfo) {
    this.pageInfo = pageInfo;
    return this;
  }

  public TimeSeriesQueryResponse putPageInfoItem(String key, Object pageInfoItem) {
    if (this.pageInfo == null) {
      this.pageInfo = new HashMap<>();
    }
    this.pageInfo.put(key, pageInfoItem);
    return this;
  }

  /**
   * Get pageInfo
   * @return pageInfo
   */
  @jakarta.annotation.Nullable
  public Map<String, Object> getPageInfo() {
    return pageInfo;
  }

  public void setPageInfo(@jakarta.annotation.Nullable Map<String, Object> pageInfo) {
    this.pageInfo = pageInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesQueryResponse timeSeriesQueryResponse = (TimeSeriesQueryResponse) o;
    return Objects.equals(this.thingId, timeSeriesQueryResponse.thingId) &&
        Objects.equals(this.data, timeSeriesQueryResponse.data) &&
        Objects.equals(this.pageInfo, timeSeriesQueryResponse.pageInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(thingId, data, pageInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesQueryResponse {\n");
    sb.append("    thingId: ").append(toIndentedString(thingId)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    pageInfo: ").append(toIndentedString(pageInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("thing_id");
    openapiFields.add("data");
    openapiFields.add("page_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesQueryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesQueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesQueryResponse is not found in the empty JSON string", TimeSeriesQueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesQueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesQueryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("thing_id") != null && !jsonObj.get("thing_id").isJsonNull()) && !jsonObj.get("thing_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thing_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thing_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesQueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesQueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesQueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesQueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesQueryResponse>() {
           @Override
           public void write(JsonWriter out, TimeSeriesQueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesQueryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesQueryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesQueryResponse
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesQueryResponse
   */
  public static TimeSeriesQueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesQueryResponse.class);
  }

  /**
   * Convert an instance of TimeSeriesQueryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

