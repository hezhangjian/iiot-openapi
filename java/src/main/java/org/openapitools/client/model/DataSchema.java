/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DoubleSchema;
import org.openapitools.client.model.IntegerSchema;
import org.openapitools.client.model.ObjectSchema;
import org.openapitools.client.model.StringSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataSchema
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T20:31:18.115216+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class DataSchema {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BOOL("bool"),
    
    INTEGER("integer"),
    
    DOUBLE("double"),
    
    OBJECT("object"),
    
    STRING("string"),
    
    TIME("time");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @jakarta.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_INTEGER_SCHEMA = "integer_schema";
  @SerializedName(SERIALIZED_NAME_INTEGER_SCHEMA)
  @jakarta.annotation.Nullable
  private IntegerSchema integerSchema;

  public static final String SERIALIZED_NAME_DOUBLE_SCHEMA = "double_schema";
  @SerializedName(SERIALIZED_NAME_DOUBLE_SCHEMA)
  @jakarta.annotation.Nullable
  private DoubleSchema doubleSchema;

  public static final String SERIALIZED_NAME_STRING_SCHEMA = "string_schema";
  @SerializedName(SERIALIZED_NAME_STRING_SCHEMA)
  @jakarta.annotation.Nullable
  private StringSchema stringSchema;

  public static final String SERIALIZED_NAME_OBJECT_SCHEMA = "object_schema";
  @SerializedName(SERIALIZED_NAME_OBJECT_SCHEMA)
  @jakarta.annotation.Nullable
  private ObjectSchema objectSchema;

  public DataSchema() {
  }

  public DataSchema type(@jakarta.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@jakarta.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public DataSchema integerSchema(@jakarta.annotation.Nullable IntegerSchema integerSchema) {
    this.integerSchema = integerSchema;
    return this;
  }

  /**
   * Get integerSchema
   * @return integerSchema
   */
  @jakarta.annotation.Nullable
  public IntegerSchema getIntegerSchema() {
    return integerSchema;
  }

  public void setIntegerSchema(@jakarta.annotation.Nullable IntegerSchema integerSchema) {
    this.integerSchema = integerSchema;
  }


  public DataSchema doubleSchema(@jakarta.annotation.Nullable DoubleSchema doubleSchema) {
    this.doubleSchema = doubleSchema;
    return this;
  }

  /**
   * Get doubleSchema
   * @return doubleSchema
   */
  @jakarta.annotation.Nullable
  public DoubleSchema getDoubleSchema() {
    return doubleSchema;
  }

  public void setDoubleSchema(@jakarta.annotation.Nullable DoubleSchema doubleSchema) {
    this.doubleSchema = doubleSchema;
  }


  public DataSchema stringSchema(@jakarta.annotation.Nullable StringSchema stringSchema) {
    this.stringSchema = stringSchema;
    return this;
  }

  /**
   * Get stringSchema
   * @return stringSchema
   */
  @jakarta.annotation.Nullable
  public StringSchema getStringSchema() {
    return stringSchema;
  }

  public void setStringSchema(@jakarta.annotation.Nullable StringSchema stringSchema) {
    this.stringSchema = stringSchema;
  }


  public DataSchema objectSchema(@jakarta.annotation.Nullable ObjectSchema objectSchema) {
    this.objectSchema = objectSchema;
    return this;
  }

  /**
   * Get objectSchema
   * @return objectSchema
   */
  @jakarta.annotation.Nullable
  public ObjectSchema getObjectSchema() {
    return objectSchema;
  }

  public void setObjectSchema(@jakarta.annotation.Nullable ObjectSchema objectSchema) {
    this.objectSchema = objectSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSchema dataSchema = (DataSchema) o;
    return Objects.equals(this.type, dataSchema.type) &&
        Objects.equals(this.integerSchema, dataSchema.integerSchema) &&
        Objects.equals(this.doubleSchema, dataSchema.doubleSchema) &&
        Objects.equals(this.stringSchema, dataSchema.stringSchema) &&
        Objects.equals(this.objectSchema, dataSchema.objectSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, integerSchema, doubleSchema, stringSchema, objectSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSchema {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    integerSchema: ").append(toIndentedString(integerSchema)).append("\n");
    sb.append("    doubleSchema: ").append(toIndentedString(doubleSchema)).append("\n");
    sb.append("    stringSchema: ").append(toIndentedString(stringSchema)).append("\n");
    sb.append("    objectSchema: ").append(toIndentedString(objectSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("integer_schema");
    openapiFields.add("double_schema");
    openapiFields.add("string_schema");
    openapiFields.add("object_schema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSchema is not found in the empty JSON string", DataSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `integer_schema`
      if (jsonObj.get("integer_schema") != null && !jsonObj.get("integer_schema").isJsonNull()) {
        IntegerSchema.validateJsonElement(jsonObj.get("integer_schema"));
      }
      // validate the optional field `double_schema`
      if (jsonObj.get("double_schema") != null && !jsonObj.get("double_schema").isJsonNull()) {
        DoubleSchema.validateJsonElement(jsonObj.get("double_schema"));
      }
      // validate the optional field `string_schema`
      if (jsonObj.get("string_schema") != null && !jsonObj.get("string_schema").isJsonNull()) {
        StringSchema.validateJsonElement(jsonObj.get("string_schema"));
      }
      // validate the optional field `object_schema`
      if (jsonObj.get("object_schema") != null && !jsonObj.get("object_schema").isJsonNull()) {
        ObjectSchema.validateJsonElement(jsonObj.get("object_schema"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSchema>() {
           @Override
           public void write(JsonWriter out, DataSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSchema
   * @throws IOException if the JSON string is invalid with respect to DataSchema
   */
  public static DataSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSchema.class);
  }

  /**
   * Convert an instance of DataSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

