/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BriefDictionary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T08:57:00.546871+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class BriefDictionary {
  public static final String SERIALIZED_NAME_DIC_ID = "dic_id";
  @SerializedName(SERIALIZED_NAME_DIC_ID)
  @javax.annotation.Nullable
  private String dicId;

  public static final String SERIALIZED_NAME_DIC_NAME = "dic_name";
  @SerializedName(SERIALIZED_NAME_DIC_NAME)
  @javax.annotation.Nullable
  private String dicName;

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  @javax.annotation.Nullable
  private String dataType;

  public static final String SERIALIZED_NAME_CATALOG_ID = "catalog_id";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  @javax.annotation.Nullable
  private String catalogId;

  public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  @javax.annotation.Nullable
  private String createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "update_time";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  @javax.annotation.Nullable
  private String updateTime;

  public BriefDictionary() {
  }

  public BriefDictionary dicId(@javax.annotation.Nullable String dicId) {
    this.dicId = dicId;
    return this;
  }

  /**
   * Get dicId
   * @return dicId
   */
  @javax.annotation.Nullable
  public String getDicId() {
    return dicId;
  }

  public void setDicId(@javax.annotation.Nullable String dicId) {
    this.dicId = dicId;
  }


  public BriefDictionary dicName(@javax.annotation.Nullable String dicName) {
    this.dicName = dicName;
    return this;
  }

  /**
   * Get dicName
   * @return dicName
   */
  @javax.annotation.Nullable
  public String getDicName() {
    return dicName;
  }

  public void setDicName(@javax.annotation.Nullable String dicName) {
    this.dicName = dicName;
  }


  public BriefDictionary dataType(@javax.annotation.Nullable String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nullable
  public String getDataType() {
    return dataType;
  }

  public void setDataType(@javax.annotation.Nullable String dataType) {
    this.dataType = dataType;
  }


  public BriefDictionary catalogId(@javax.annotation.Nullable String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * Get catalogId
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(@javax.annotation.Nullable String catalogId) {
    this.catalogId = catalogId;
  }


  public BriefDictionary createTime(@javax.annotation.Nullable String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(@javax.annotation.Nullable String createTime) {
    this.createTime = createTime;
  }


  public BriefDictionary updateTime(@javax.annotation.Nullable String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(@javax.annotation.Nullable String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BriefDictionary briefDictionary = (BriefDictionary) o;
    return Objects.equals(this.dicId, briefDictionary.dicId) &&
        Objects.equals(this.dicName, briefDictionary.dicName) &&
        Objects.equals(this.dataType, briefDictionary.dataType) &&
        Objects.equals(this.catalogId, briefDictionary.catalogId) &&
        Objects.equals(this.createTime, briefDictionary.createTime) &&
        Objects.equals(this.updateTime, briefDictionary.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dicId, dicName, dataType, catalogId, createTime, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BriefDictionary {\n");
    sb.append("    dicId: ").append(toIndentedString(dicId)).append("\n");
    sb.append("    dicName: ").append(toIndentedString(dicName)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dic_id");
    openapiFields.add("dic_name");
    openapiFields.add("data_type");
    openapiFields.add("catalog_id");
    openapiFields.add("create_time");
    openapiFields.add("update_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BriefDictionary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BriefDictionary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BriefDictionary is not found in the empty JSON string", BriefDictionary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BriefDictionary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BriefDictionary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dic_id") != null && !jsonObj.get("dic_id").isJsonNull()) && !jsonObj.get("dic_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dic_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dic_id").toString()));
      }
      if ((jsonObj.get("dic_name") != null && !jsonObj.get("dic_name").isJsonNull()) && !jsonObj.get("dic_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dic_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dic_name").toString()));
      }
      if ((jsonObj.get("data_type") != null && !jsonObj.get("data_type").isJsonNull()) && !jsonObj.get("data_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_type").toString()));
      }
      if ((jsonObj.get("catalog_id") != null && !jsonObj.get("catalog_id").isJsonNull()) && !jsonObj.get("catalog_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog_id").toString()));
      }
      if ((jsonObj.get("create_time") != null && !jsonObj.get("create_time").isJsonNull()) && !jsonObj.get("create_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `create_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("create_time").toString()));
      }
      if ((jsonObj.get("update_time") != null && !jsonObj.get("update_time").isJsonNull()) && !jsonObj.get("update_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `update_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("update_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BriefDictionary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BriefDictionary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BriefDictionary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BriefDictionary.class));

       return (TypeAdapter<T>) new TypeAdapter<BriefDictionary>() {
           @Override
           public void write(JsonWriter out, BriefDictionary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BriefDictionary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BriefDictionary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BriefDictionary
   * @throws IOException if the JSON string is invalid with respect to BriefDictionary
   */
  public static BriefDictionary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BriefDictionary.class);
  }

  /**
   * Convert an instance of BriefDictionary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

