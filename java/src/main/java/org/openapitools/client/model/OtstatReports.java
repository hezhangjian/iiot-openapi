/*
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OtstatReports
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-27T18:38:37.514966+08:00[Asia/Shanghai]", comments = "Generator version: 7.12.0")
public class OtstatReports {
  public static final String SERIALIZED_NAME_STAT_TIME = "stat_time";
  @SerializedName(SERIALIZED_NAME_STAT_TIME)
  @jakarta.annotation.Nullable
  private String statTime;

  public static final String SERIALIZED_NAME_AGING_TIME = "aging_time";
  @SerializedName(SERIALIZED_NAME_AGING_TIME)
  @jakarta.annotation.Nullable
  private String agingTime;

  public static final String SERIALIZED_NAME_STAT_STATUS = "stat_status";
  @SerializedName(SERIALIZED_NAME_STAT_STATUS)
  @jakarta.annotation.Nullable
  private String statStatus;

  public static final String SERIALIZED_NAME_STAT_RESULT = "stat_result";
  @SerializedName(SERIALIZED_NAME_STAT_RESULT)
  @jakarta.annotation.Nullable
  private String statResult;

  public OtstatReports() {
  }

  public OtstatReports statTime(@jakarta.annotation.Nullable String statTime) {
    this.statTime = statTime;
    return this;
  }

  /**
   * Get statTime
   * @return statTime
   */
  @jakarta.annotation.Nullable
  public String getStatTime() {
    return statTime;
  }

  public void setStatTime(@jakarta.annotation.Nullable String statTime) {
    this.statTime = statTime;
  }


  public OtstatReports agingTime(@jakarta.annotation.Nullable String agingTime) {
    this.agingTime = agingTime;
    return this;
  }

  /**
   * Get agingTime
   * @return agingTime
   */
  @jakarta.annotation.Nullable
  public String getAgingTime() {
    return agingTime;
  }

  public void setAgingTime(@jakarta.annotation.Nullable String agingTime) {
    this.agingTime = agingTime;
  }


  public OtstatReports statStatus(@jakarta.annotation.Nullable String statStatus) {
    this.statStatus = statStatus;
    return this;
  }

  /**
   * Get statStatus
   * @return statStatus
   */
  @jakarta.annotation.Nullable
  public String getStatStatus() {
    return statStatus;
  }

  public void setStatStatus(@jakarta.annotation.Nullable String statStatus) {
    this.statStatus = statStatus;
  }


  public OtstatReports statResult(@jakarta.annotation.Nullable String statResult) {
    this.statResult = statResult;
    return this;
  }

  /**
   * Get statResult
   * @return statResult
   */
  @jakarta.annotation.Nullable
  public String getStatResult() {
    return statResult;
  }

  public void setStatResult(@jakarta.annotation.Nullable String statResult) {
    this.statResult = statResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtstatReports otstatReports = (OtstatReports) o;
    return Objects.equals(this.statTime, otstatReports.statTime) &&
        Objects.equals(this.agingTime, otstatReports.agingTime) &&
        Objects.equals(this.statStatus, otstatReports.statStatus) &&
        Objects.equals(this.statResult, otstatReports.statResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statTime, agingTime, statStatus, statResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtstatReports {\n");
    sb.append("    statTime: ").append(toIndentedString(statTime)).append("\n");
    sb.append("    agingTime: ").append(toIndentedString(agingTime)).append("\n");
    sb.append("    statStatus: ").append(toIndentedString(statStatus)).append("\n");
    sb.append("    statResult: ").append(toIndentedString(statResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stat_time");
    openapiFields.add("aging_time");
    openapiFields.add("stat_status");
    openapiFields.add("stat_result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OtstatReports
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OtstatReports.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OtstatReports is not found in the empty JSON string", OtstatReports.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OtstatReports.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OtstatReports` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("stat_time") != null && !jsonObj.get("stat_time").isJsonNull()) && !jsonObj.get("stat_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stat_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stat_time").toString()));
      }
      if ((jsonObj.get("aging_time") != null && !jsonObj.get("aging_time").isJsonNull()) && !jsonObj.get("aging_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aging_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aging_time").toString()));
      }
      if ((jsonObj.get("stat_status") != null && !jsonObj.get("stat_status").isJsonNull()) && !jsonObj.get("stat_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stat_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stat_status").toString()));
      }
      if ((jsonObj.get("stat_result") != null && !jsonObj.get("stat_result").isJsonNull()) && !jsonObj.get("stat_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stat_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stat_result").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OtstatReports.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OtstatReports' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OtstatReports> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OtstatReports.class));

       return (TypeAdapter<T>) new TypeAdapter<OtstatReports>() {
           @Override
           public void write(JsonWriter out, OtstatReports value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OtstatReports read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OtstatReports given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OtstatReports
   * @throws IOException if the JSON string is invalid with respect to OtstatReports
   */
  public static OtstatReports fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OtstatReports.class);
  }

  /**
   * Convert an instance of OtstatReports to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

