/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateThingRequest,
  CreateTokenReqDTO,
  DatasourceReportRequest,
  DatasourceReportResponse,
  Model,
  Thing,
  TimeSeriesQueryRequest,
  TimeSeriesQueryResponse,
  TokenRsp,
} from '../models/index';
import {
    CreateThingRequestFromJSON,
    CreateThingRequestToJSON,
    CreateTokenReqDTOFromJSON,
    CreateTokenReqDTOToJSON,
    DatasourceReportRequestFromJSON,
    DatasourceReportRequestToJSON,
    DatasourceReportResponseFromJSON,
    DatasourceReportResponseToJSON,
    ModelFromJSON,
    ModelToJSON,
    ThingFromJSON,
    ThingToJSON,
    TimeSeriesQueryRequestFromJSON,
    TimeSeriesQueryRequestToJSON,
    TimeSeriesQueryResponseFromJSON,
    TimeSeriesQueryResponseToJSON,
    TokenRspFromJSON,
    TokenRspToJSON,
} from '../models/index';

export interface CreateThingOperationRequest {
    xAuthToken: string;
    projectId: string;
    createThingRequest: CreateThingRequest;
}

export interface DeleteModelRequest {
    projectId: string;
    modelId: string;
    xAuthToken: string;
}

export interface DeleteThingRequest {
    xAuthToken: string;
    projectId: string;
    thingId: string;
}

export interface GenerateTokenRequest {
    createTokenReqDTO: Array<CreateTokenReqDTO>;
}

export interface GetModelRequest {
    xAuthToken: string;
    projectId: string;
    modelId: string;
}

export interface GetThingRequest {
    xAuthToken: string;
    projectId: string;
    thingId: string;
}

export interface QueryTimeSeriesRequest {
    projectId: string;
    thingId: string;
    xAuthToken: string;
    timeSeriesQueryRequest: TimeSeriesQueryRequest;
}

export interface ReportToApiDatasourceRequest {
    xAuthToken: string;
    projectId: string;
    datasourceId: string;
    datasourceReportRequest: DatasourceReportRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async createThingRaw(requestParameters: CreateThingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thing>> {
        if (requestParameters['xAuthToken'] == null) {
            throw new runtime.RequiredError(
                'xAuthToken',
                'Required parameter "xAuthToken" was null or undefined when calling createThing().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createThing().'
            );
        }

        if (requestParameters['createThingRequest'] == null) {
            throw new runtime.RequiredError(
                'createThingRequest',
                'Required parameter "createThingRequest" was null or undefined when calling createThing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthToken'] != null) {
            headerParameters['X-Auth-Token'] = String(requestParameters['xAuthToken']);
        }

        const response = await this.request({
            path: `/v5/{project_id}/things`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateThingRequestToJSON(requestParameters['createThingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThingFromJSON(jsonValue));
    }

    /**
     */
    async createThing(requestParameters: CreateThingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thing> {
        const response = await this.createThingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除模型
     */
    async deleteModelRaw(requestParameters: DeleteModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteModel().'
            );
        }

        if (requestParameters['modelId'] == null) {
            throw new runtime.RequiredError(
                'modelId',
                'Required parameter "modelId" was null or undefined when calling deleteModel().'
            );
        }

        if (requestParameters['xAuthToken'] == null) {
            throw new runtime.RequiredError(
                'xAuthToken',
                'Required parameter "xAuthToken" was null or undefined when calling deleteModel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthToken'] != null) {
            headerParameters['X-Auth-Token'] = String(requestParameters['xAuthToken']);
        }

        const response = await this.request({
            path: `/v5/{project_id}/models/{model_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"model_id"}}`, encodeURIComponent(String(requestParameters['modelId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 删除模型
     */
    async deleteModel(requestParameters: DeleteModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteModelRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteThingRaw(requestParameters: DeleteThingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xAuthToken'] == null) {
            throw new runtime.RequiredError(
                'xAuthToken',
                'Required parameter "xAuthToken" was null or undefined when calling deleteThing().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteThing().'
            );
        }

        if (requestParameters['thingId'] == null) {
            throw new runtime.RequiredError(
                'thingId',
                'Required parameter "thingId" was null or undefined when calling deleteThing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthToken'] != null) {
            headerParameters['X-Auth-Token'] = String(requestParameters['xAuthToken']);
        }

        const response = await this.request({
            path: `/v5/{project_id}/things/{thing_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"thing_id"}}`, encodeURIComponent(String(requestParameters['thingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteThing(requestParameters: DeleteThingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteThingRaw(requestParameters, initOverrides);
    }

    /**
     * 获取认证 Token
     */
    async generateTokenRaw(requestParameters: GenerateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRsp>> {
        if (requestParameters['createTokenReqDTO'] == null) {
            throw new runtime.RequiredError(
                'createTokenReqDTO',
                'Required parameter "createTokenReqDTO" was null or undefined when calling generateToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/iotstage/auth/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createTokenReqDTO']!.map(CreateTokenReqDTOToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenRspFromJSON(jsonValue));
    }

    /**
     * 获取认证 Token
     */
    async generateToken(requestParameters: GenerateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRsp> {
        const response = await this.generateTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询单个模型内容
     */
    async getModelRaw(requestParameters: GetModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters['xAuthToken'] == null) {
            throw new runtime.RequiredError(
                'xAuthToken',
                'Required parameter "xAuthToken" was null or undefined when calling getModel().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getModel().'
            );
        }

        if (requestParameters['modelId'] == null) {
            throw new runtime.RequiredError(
                'modelId',
                'Required parameter "modelId" was null or undefined when calling getModel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthToken'] != null) {
            headerParameters['X-Auth-Token'] = String(requestParameters['xAuthToken']);
        }

        const response = await this.request({
            path: `/v5/{project_id}/models/{model_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"model_id"}}`, encodeURIComponent(String(requestParameters['modelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * 查询单个模型内容
     */
    async getModel(requestParameters: GetModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Model> {
        const response = await this.getModelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getThingRaw(requestParameters: GetThingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thing>> {
        if (requestParameters['xAuthToken'] == null) {
            throw new runtime.RequiredError(
                'xAuthToken',
                'Required parameter "xAuthToken" was null or undefined when calling getThing().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getThing().'
            );
        }

        if (requestParameters['thingId'] == null) {
            throw new runtime.RequiredError(
                'thingId',
                'Required parameter "thingId" was null or undefined when calling getThing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAuthToken'] != null) {
            headerParameters['X-Auth-Token'] = String(requestParameters['xAuthToken']);
        }

        const response = await this.request({
            path: `/v5/{project_id}/things/{thing_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"thing_id"}}`, encodeURIComponent(String(requestParameters['thingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThingFromJSON(jsonValue));
    }

    /**
     */
    async getThing(requestParameters: GetThingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thing> {
        const response = await this.getThingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询 Thing 的属性历史值
     */
    async queryTimeSeriesRaw(requestParameters: QueryTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSeriesQueryResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling queryTimeSeries().'
            );
        }

        if (requestParameters['thingId'] == null) {
            throw new runtime.RequiredError(
                'thingId',
                'Required parameter "thingId" was null or undefined when calling queryTimeSeries().'
            );
        }

        if (requestParameters['xAuthToken'] == null) {
            throw new runtime.RequiredError(
                'xAuthToken',
                'Required parameter "xAuthToken" was null or undefined when calling queryTimeSeries().'
            );
        }

        if (requestParameters['timeSeriesQueryRequest'] == null) {
            throw new runtime.RequiredError(
                'timeSeriesQueryRequest',
                'Required parameter "timeSeriesQueryRequest" was null or undefined when calling queryTimeSeries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthToken'] != null) {
            headerParameters['X-Auth-Token'] = String(requestParameters['xAuthToken']);
        }

        const response = await this.request({
            path: `/v5/{project_id}/things/{thing_id}/time-series/query`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"thing_id"}}`, encodeURIComponent(String(requestParameters['thingId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeSeriesQueryRequestToJSON(requestParameters['timeSeriesQueryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesQueryResponseFromJSON(jsonValue));
    }

    /**
     * 查询 Thing 的属性历史值
     */
    async queryTimeSeries(requestParameters: QueryTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSeriesQueryResponse> {
        const response = await this.queryTimeSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reportToApiDatasourceRaw(requestParameters: ReportToApiDatasourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DatasourceReportResponse>> {
        if (requestParameters['xAuthToken'] == null) {
            throw new runtime.RequiredError(
                'xAuthToken',
                'Required parameter "xAuthToken" was null or undefined when calling reportToApiDatasource().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling reportToApiDatasource().'
            );
        }

        if (requestParameters['datasourceId'] == null) {
            throw new runtime.RequiredError(
                'datasourceId',
                'Required parameter "datasourceId" was null or undefined when calling reportToApiDatasource().'
            );
        }

        if (requestParameters['datasourceReportRequest'] == null) {
            throw new runtime.RequiredError(
                'datasourceReportRequest',
                'Required parameter "datasourceReportRequest" was null or undefined when calling reportToApiDatasource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAuthToken'] != null) {
            headerParameters['X-Auth-Token'] = String(requestParameters['xAuthToken']);
        }

        const response = await this.request({
            path: `/v5/{project_id}/datasources/{datasource_id}/data`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"datasource_id"}}`, encodeURIComponent(String(requestParameters['datasourceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatasourceReportRequestToJSON(requestParameters['datasourceReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasourceReportResponseFromJSON(jsonValue));
    }

    /**
     */
    async reportToApiDatasource(requestParameters: ReportToApiDatasourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DatasourceReportResponse> {
        const response = await this.reportToApiDatasourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
