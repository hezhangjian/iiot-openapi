/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ColumnSchema } from './ColumnSchema';
import {
    ColumnSchemaFromJSON,
    ColumnSchemaFromJSONTyped,
    ColumnSchemaToJSON,
    ColumnSchemaToJSONTyped,
} from './ColumnSchema';
import type { IndexSchema } from './IndexSchema';
import {
    IndexSchemaFromJSON,
    IndexSchemaFromJSONTyped,
    IndexSchemaToJSON,
    IndexSchemaToJSONTyped,
} from './IndexSchema';

/**
 * 
 * @export
 * @interface TableSchema
 */
export interface TableSchema {
    /**
     * 
     * @type {Array<ColumnSchema>}
     * @memberof TableSchema
     */
    columns: Array<ColumnSchema>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TableSchema
     */
    primaryKey: Array<string>;
    /**
     * 
     * @type {Array<IndexSchema>}
     * @memberof TableSchema
     */
    indexes?: Array<IndexSchema>;
}

/**
 * Check if a given object implements the TableSchema interface.
 */
export function instanceOfTableSchema(value: object): value is TableSchema {
    if (!('columns' in value) || value['columns'] === undefined) return false;
    if (!('primaryKey' in value) || value['primaryKey'] === undefined) return false;
    return true;
}

export function TableSchemaFromJSON(json: any): TableSchema {
    return TableSchemaFromJSONTyped(json, false);
}

export function TableSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): TableSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'columns': ((json['columns'] as Array<any>).map(ColumnSchemaFromJSON)),
        'primaryKey': json['primary_key'],
        'indexes': json['indexes'] == null ? undefined : ((json['indexes'] as Array<any>).map(IndexSchemaFromJSON)),
    };
}

export function TableSchemaToJSON(json: any): TableSchema {
    return TableSchemaToJSONTyped(json, false);
}

export function TableSchemaToJSONTyped(value?: TableSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'columns': ((value['columns'] as Array<any>).map(ColumnSchemaToJSON)),
        'primary_key': value['primaryKey'],
        'indexes': value['indexes'] == null ? undefined : ((value['indexes'] as Array<any>).map(IndexSchemaToJSON)),
    };
}

