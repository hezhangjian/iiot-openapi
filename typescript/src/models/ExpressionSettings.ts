/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Expression } from './Expression';
import {
    ExpressionFromJSON,
    ExpressionFromJSONTyped,
    ExpressionToJSON,
    ExpressionToJSONTyped,
} from './Expression';

/**
 * 
 * @export
 * @interface ExpressionSettings
 */
export interface ExpressionSettings {
    /**
     * 
     * @type {string}
     * @memberof ExpressionSettings
     */
    condition?: string;
    /**
     * 
     * @type {Array<Expression>}
     * @memberof ExpressionSettings
     */
    expressions: Array<Expression>;
}

/**
 * Check if a given object implements the ExpressionSettings interface.
 */
export function instanceOfExpressionSettings(value: object): value is ExpressionSettings {
    if (!('expressions' in value) || value['expressions'] === undefined) return false;
    return true;
}

export function ExpressionSettingsFromJSON(json: any): ExpressionSettings {
    return ExpressionSettingsFromJSONTyped(json, false);
}

export function ExpressionSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpressionSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'condition': json['condition'] == null ? undefined : json['condition'],
        'expressions': ((json['expressions'] as Array<any>).map(ExpressionFromJSON)),
    };
}

export function ExpressionSettingsToJSON(json: any): ExpressionSettings {
    return ExpressionSettingsToJSONTyped(json, false);
}

export function ExpressionSettingsToJSONTyped(value?: ExpressionSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'condition': value['condition'],
        'expressions': ((value['expressions'] as Array<any>).map(ExpressionToJSON)),
    };
}

