/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CleanSettings } from './CleanSettings';
import {
    CleanSettingsFromJSON,
    CleanSettingsFromJSONTyped,
    CleanSettingsToJSON,
    CleanSettingsToJSONTyped,
} from './CleanSettings';
import type { EventGenSetting } from './EventGenSetting';
import {
    EventGenSettingFromJSON,
    EventGenSettingFromJSONTyped,
    EventGenSettingToJSON,
    EventGenSettingToJSONTyped,
} from './EventGenSetting';
import type { ExpressionSettings } from './ExpressionSettings';
import {
    ExpressionSettingsFromJSON,
    ExpressionSettingsFromJSONTyped,
    ExpressionSettingsToJSON,
    ExpressionSettingsToJSONTyped,
} from './ExpressionSettings';
import type { ComplexSetting } from './ComplexSetting';
import {
    ComplexSettingFromJSON,
    ComplexSettingFromJSONTyped,
    ComplexSettingToJSON,
    ComplexSettingToJSONTyped,
} from './ComplexSetting';
import type { TagMatcher } from './TagMatcher';
import {
    TagMatcherFromJSON,
    TagMatcherFromJSONTyped,
    TagMatcherToJSON,
    TagMatcherToJSONTyped,
} from './TagMatcher';

/**
 * 
 * @export
 * @interface AnalysisTask
 */
export interface AnalysisTask {
    /**
     * 
     * @type {CleanSettings}
     * @memberof AnalysisTask
     */
    cleanSettings?: CleanSettings;
    /**
     * 
     * @type {string}
     * @memberof AnalysisTask
     */
    eventClass?: string;
    /**
     * 
     * @type {EventGenSetting}
     * @memberof AnalysisTask
     */
    eventGenSettings?: EventGenSetting;
    /**
     * 
     * @type {ComplexSetting}
     * @memberof AnalysisTask
     */
    complexSettings?: ComplexSetting;
    /**
     * 
     * @type {ExpressionSettings}
     * @memberof AnalysisTask
     */
    expressionSettings?: ExpressionSettings;
    /**
     * 
     * @type {string}
     * @memberof AnalysisTask
     */
    taskId?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisTask
     */
    taskName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AnalysisTask
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AnalysisTask
     */
    calcType?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisTask
     */
    scheduleType?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisTask
     */
    period?: string;
    /**
     * 
     * @type {Array<TagMatcher>}
     * @memberof AnalysisTask
     */
    tagMatchers?: Array<TagMatcher>;
    /**
     * 
     * @type {string}
     * @memberof AnalysisTask
     */
    createTime?: string;
    /**
     * 
     * @type {string}
     * @memberof AnalysisTask
     */
    updateTime?: string;
}

/**
 * Check if a given object implements the AnalysisTask interface.
 */
export function instanceOfAnalysisTask(value: object): value is AnalysisTask {
    return true;
}

export function AnalysisTaskFromJSON(json: any): AnalysisTask {
    return AnalysisTaskFromJSONTyped(json, false);
}

export function AnalysisTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnalysisTask {
    if (json == null) {
        return json;
    }
    return {
        
        'cleanSettings': json['clean_settings'] == null ? undefined : CleanSettingsFromJSON(json['clean_settings']),
        'eventClass': json['event_class'] == null ? undefined : json['event_class'],
        'eventGenSettings': json['event_gen_settings'] == null ? undefined : EventGenSettingFromJSON(json['event_gen_settings']),
        'complexSettings': json['complex_settings'] == null ? undefined : ComplexSettingFromJSON(json['complex_settings']),
        'expressionSettings': json['expression_settings'] == null ? undefined : ExpressionSettingsFromJSON(json['expression_settings']),
        'taskId': json['task_id'] == null ? undefined : json['task_id'],
        'taskName': json['task_name'] == null ? undefined : json['task_name'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'calcType': json['calc_type'] == null ? undefined : json['calc_type'],
        'scheduleType': json['schedule_type'] == null ? undefined : json['schedule_type'],
        'period': json['period'] == null ? undefined : json['period'],
        'tagMatchers': json['tag_matchers'] == null ? undefined : ((json['tag_matchers'] as Array<any>).map(TagMatcherFromJSON)),
        'createTime': json['create_time'] == null ? undefined : json['create_time'],
        'updateTime': json['update_time'] == null ? undefined : json['update_time'],
    };
}

export function AnalysisTaskToJSON(json: any): AnalysisTask {
    return AnalysisTaskToJSONTyped(json, false);
}

export function AnalysisTaskToJSONTyped(value?: AnalysisTask | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'clean_settings': CleanSettingsToJSON(value['cleanSettings']),
        'event_class': value['eventClass'],
        'event_gen_settings': EventGenSettingToJSON(value['eventGenSettings']),
        'complex_settings': ComplexSettingToJSON(value['complexSettings']),
        'expression_settings': ExpressionSettingsToJSON(value['expressionSettings']),
        'task_id': value['taskId'],
        'task_name': value['taskName'],
        'enabled': value['enabled'],
        'calc_type': value['calcType'],
        'schedule_type': value['scheduleType'],
        'period': value['period'],
        'tag_matchers': value['tagMatchers'] == null ? undefined : ((value['tagMatchers'] as Array<any>).map(TagMatcherToJSON)),
        'create_time': value['createTime'],
        'update_time': value['updateTime'],
    };
}

