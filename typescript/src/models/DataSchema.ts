/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ObjectSchema } from './ObjectSchema';
import {
    ObjectSchemaFromJSON,
    ObjectSchemaFromJSONTyped,
    ObjectSchemaToJSON,
    ObjectSchemaToJSONTyped,
} from './ObjectSchema';
import type { DoubleSchema } from './DoubleSchema';
import {
    DoubleSchemaFromJSON,
    DoubleSchemaFromJSONTyped,
    DoubleSchemaToJSON,
    DoubleSchemaToJSONTyped,
} from './DoubleSchema';
import type { IntegerSchema } from './IntegerSchema';
import {
    IntegerSchemaFromJSON,
    IntegerSchemaFromJSONTyped,
    IntegerSchemaToJSON,
    IntegerSchemaToJSONTyped,
} from './IntegerSchema';
import type { StringSchema } from './StringSchema';
import {
    StringSchemaFromJSON,
    StringSchemaFromJSONTyped,
    StringSchemaToJSON,
    StringSchemaToJSONTyped,
} from './StringSchema';

/**
 * 
 * @export
 * @interface DataSchema
 */
export interface DataSchema {
    /**
     * 
     * @type {string}
     * @memberof DataSchema
     */
    type: DataSchemaTypeEnum;
    /**
     * 
     * @type {IntegerSchema}
     * @memberof DataSchema
     */
    integerSchema?: IntegerSchema;
    /**
     * 
     * @type {DoubleSchema}
     * @memberof DataSchema
     */
    doubleSchema?: DoubleSchema;
    /**
     * 
     * @type {StringSchema}
     * @memberof DataSchema
     */
    stringSchema?: StringSchema;
    /**
     * 
     * @type {ObjectSchema}
     * @memberof DataSchema
     */
    objectSchema?: ObjectSchema;
}


/**
 * @export
 */
export const DataSchemaTypeEnum = {
    Bool: 'bool',
    Integer: 'integer',
    Double: 'double',
    Object: 'object',
    String: 'string',
    Time: 'time'
} as const;
export type DataSchemaTypeEnum = typeof DataSchemaTypeEnum[keyof typeof DataSchemaTypeEnum];


/**
 * Check if a given object implements the DataSchema interface.
 */
export function instanceOfDataSchema(value: object): value is DataSchema {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function DataSchemaFromJSON(json: any): DataSchema {
    return DataSchemaFromJSONTyped(json, false);
}

export function DataSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'integerSchema': json['integer_schema'] == null ? undefined : IntegerSchemaFromJSON(json['integer_schema']),
        'doubleSchema': json['double_schema'] == null ? undefined : DoubleSchemaFromJSON(json['double_schema']),
        'stringSchema': json['string_schema'] == null ? undefined : StringSchemaFromJSON(json['string_schema']),
        'objectSchema': json['object_schema'] == null ? undefined : ObjectSchemaFromJSON(json['object_schema']),
    };
}

export function DataSchemaToJSON(json: any): DataSchema {
    return DataSchemaToJSONTyped(json, false);
}

export function DataSchemaToJSONTyped(value?: DataSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'integer_schema': IntegerSchemaToJSON(value['integerSchema']),
        'double_schema': DoubleSchemaToJSON(value['doubleSchema']),
        'string_schema': StringSchemaToJSON(value['stringSchema']),
        'object_schema': ObjectSchemaToJSON(value['objectSchema']),
    };
}

