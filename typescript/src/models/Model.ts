/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComponentDto } from './ComponentDto';
import {
    ComponentDtoFromJSON,
    ComponentDtoFromJSONTyped,
    ComponentDtoToJSON,
    ComponentDtoToJSONTyped,
} from './ComponentDto';
import type { PropertyDto } from './PropertyDto';
import {
    PropertyDtoFromJSON,
    PropertyDtoFromJSONTyped,
    PropertyDtoToJSON,
    PropertyDtoToJSONTyped,
} from './PropertyDto';

/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    modelId: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    modelName: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    type?: ModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    description?: string;
    /**
     * 
     * @type {Array<PropertyDto>}
     * @memberof Model
     */
    properties?: Array<PropertyDto>;
    /**
     * 
     * @type {Array<ComponentDto>}
     * @memberof Model
     */
    components?: Array<ComponentDto>;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    createTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    updateTime?: string;
}


/**
 * @export
 */
export const ModelTypeEnum = {
    Local: 'local',
    Cascade: 'cascade'
} as const;
export type ModelTypeEnum = typeof ModelTypeEnum[keyof typeof ModelTypeEnum];


/**
 * Check if a given object implements the Model interface.
 */
export function instanceOfModel(value: object): value is Model {
    if (!('modelId' in value) || value['modelId'] === undefined) return false;
    if (!('modelName' in value) || value['modelName'] === undefined) return false;
    return true;
}

export function ModelFromJSON(json: any): Model {
    return ModelFromJSONTyped(json, false);
}

export function ModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Model {
    if (json == null) {
        return json;
    }
    return {
        
        'modelId': json['model_id'],
        'modelName': json['model_name'],
        'type': json['type'] == null ? undefined : json['type'],
        'description': json['description'] == null ? undefined : json['description'],
        'properties': json['properties'] == null ? undefined : ((json['properties'] as Array<any>).map(PropertyDtoFromJSON)),
        'components': json['components'] == null ? undefined : ((json['components'] as Array<any>).map(ComponentDtoFromJSON)),
        'createTime': json['create_time'] == null ? undefined : json['create_time'],
        'updateTime': json['update_time'] == null ? undefined : json['update_time'],
    };
}

export function ModelToJSON(json: any): Model {
    return ModelToJSONTyped(json, false);
}

export function ModelToJSONTyped(value?: Model | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'model_id': value['modelId'],
        'model_name': value['modelName'],
        'type': value['type'],
        'description': value['description'],
        'properties': value['properties'] == null ? undefined : ((value['properties'] as Array<any>).map(PropertyDtoToJSON)),
        'components': value['components'] == null ? undefined : ((value['components'] as Array<any>).map(ComponentDtoToJSON)),
        'create_time': value['createTime'],
        'update_time': value['updateTime'],
    };
}

