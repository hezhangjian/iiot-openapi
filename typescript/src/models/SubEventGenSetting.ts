/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EventGenOutput } from './EventGenOutput';
import {
    EventGenOutputFromJSON,
    EventGenOutputFromJSONTyped,
    EventGenOutputToJSON,
    EventGenOutputToJSONTyped,
} from './EventGenOutput';
import type { EventGenExpression } from './EventGenExpression';
import {
    EventGenExpressionFromJSON,
    EventGenExpressionFromJSONTyped,
    EventGenExpressionToJSON,
    EventGenExpressionToJSONTyped,
} from './EventGenExpression';
import type { EventTrigger } from './EventTrigger';
import {
    EventTriggerFromJSON,
    EventTriggerFromJSONTyped,
    EventTriggerToJSON,
    EventTriggerToJSONTyped,
} from './EventTrigger';

/**
 * 
 * @export
 * @interface SubEventGenSetting
 */
export interface SubEventGenSetting {
    /**
     * 
     * @type {string}
     * @memberof SubEventGenSetting
     */
    name: string;
    /**
     * 
     * @type {EventTrigger}
     * @memberof SubEventGenSetting
     */
    startTrigger: EventTrigger;
    /**
     * 
     * @type {EventTrigger}
     * @memberof SubEventGenSetting
     */
    endTrigger?: EventTrigger;
    /**
     * 
     * @type {Array<EventGenExpression>}
     * @memberof SubEventGenSetting
     */
    expressions?: Array<EventGenExpression>;
    /**
     * 
     * @type {EventGenOutput}
     * @memberof SubEventGenSetting
     */
    outputs?: EventGenOutput;
}

/**
 * Check if a given object implements the SubEventGenSetting interface.
 */
export function instanceOfSubEventGenSetting(value: object): value is SubEventGenSetting {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('startTrigger' in value) || value['startTrigger'] === undefined) return false;
    return true;
}

export function SubEventGenSettingFromJSON(json: any): SubEventGenSetting {
    return SubEventGenSettingFromJSONTyped(json, false);
}

export function SubEventGenSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubEventGenSetting {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'startTrigger': EventTriggerFromJSON(json['start_trigger']),
        'endTrigger': json['end_trigger'] == null ? undefined : EventTriggerFromJSON(json['end_trigger']),
        'expressions': json['expressions'] == null ? undefined : ((json['expressions'] as Array<any>).map(EventGenExpressionFromJSON)),
        'outputs': json['outputs'] == null ? undefined : EventGenOutputFromJSON(json['outputs']),
    };
}

export function SubEventGenSettingToJSON(json: any): SubEventGenSetting {
    return SubEventGenSettingToJSONTyped(json, false);
}

export function SubEventGenSettingToJSONTyped(value?: SubEventGenSetting | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'start_trigger': EventTriggerToJSON(value['startTrigger']),
        'end_trigger': EventTriggerToJSON(value['endTrigger']),
        'expressions': value['expressions'] == null ? undefined : ((value['expressions'] as Array<any>).map(EventGenExpressionToJSON)),
        'outputs': EventGenOutputToJSON(value['outputs']),
    };
}

