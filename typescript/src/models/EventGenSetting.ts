/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EventGenOutput } from './EventGenOutput';
import {
    EventGenOutputFromJSON,
    EventGenOutputFromJSONTyped,
    EventGenOutputToJSON,
    EventGenOutputToJSONTyped,
} from './EventGenOutput';
import type { SubEventGenSetting } from './SubEventGenSetting';
import {
    SubEventGenSettingFromJSON,
    SubEventGenSettingFromJSONTyped,
    SubEventGenSettingToJSON,
    SubEventGenSettingToJSONTyped,
} from './SubEventGenSetting';
import type { EventGenExpression } from './EventGenExpression';
import {
    EventGenExpressionFromJSON,
    EventGenExpressionFromJSONTyped,
    EventGenExpressionToJSON,
    EventGenExpressionToJSONTyped,
} from './EventGenExpression';
import type { EventTrigger } from './EventTrigger';
import {
    EventTriggerFromJSON,
    EventTriggerFromJSONTyped,
    EventTriggerToJSON,
    EventTriggerToJSONTyped,
} from './EventTrigger';

/**
 * 
 * @export
 * @interface EventGenSetting
 */
export interface EventGenSetting {
    /**
     * 
     * @type {EventTrigger}
     * @memberof EventGenSetting
     */
    startTrigger?: EventTrigger;
    /**
     * 
     * @type {EventTrigger}
     * @memberof EventGenSetting
     */
    endTrigger?: EventTrigger;
    /**
     * 
     * @type {Array<EventGenExpression>}
     * @memberof EventGenSetting
     */
    expressions: Array<EventGenExpression>;
    /**
     * 
     * @type {EventGenOutput}
     * @memberof EventGenSetting
     */
    outputs?: EventGenOutput;
    /**
     * 
     * @type {Array<SubEventGenSetting>}
     * @memberof EventGenSetting
     */
    subevents?: Array<SubEventGenSetting>;
}

/**
 * Check if a given object implements the EventGenSetting interface.
 */
export function instanceOfEventGenSetting(value: object): value is EventGenSetting {
    if (!('expressions' in value) || value['expressions'] === undefined) return false;
    return true;
}

export function EventGenSettingFromJSON(json: any): EventGenSetting {
    return EventGenSettingFromJSONTyped(json, false);
}

export function EventGenSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventGenSetting {
    if (json == null) {
        return json;
    }
    return {
        
        'startTrigger': json['start_trigger'] == null ? undefined : EventTriggerFromJSON(json['start_trigger']),
        'endTrigger': json['end_trigger'] == null ? undefined : EventTriggerFromJSON(json['end_trigger']),
        'expressions': ((json['expressions'] as Array<any>).map(EventGenExpressionFromJSON)),
        'outputs': json['outputs'] == null ? undefined : EventGenOutputFromJSON(json['outputs']),
        'subevents': json['subevents'] == null ? undefined : ((json['subevents'] as Array<any>).map(SubEventGenSettingFromJSON)),
    };
}

export function EventGenSettingToJSON(json: any): EventGenSetting {
    return EventGenSettingToJSONTyped(json, false);
}

export function EventGenSettingToJSONTyped(value?: EventGenSetting | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'start_trigger': EventTriggerToJSON(value['startTrigger']),
        'end_trigger': EventTriggerToJSON(value['endTrigger']),
        'expressions': ((value['expressions'] as Array<any>).map(EventGenExpressionToJSON)),
        'outputs': EventGenOutputToJSON(value['outputs']),
        'subevents': value['subevents'] == null ? undefined : ((value['subevents'] as Array<any>).map(SubEventGenSettingToJSON)),
    };
}

