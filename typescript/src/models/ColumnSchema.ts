/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DataSchema } from './DataSchema';
import {
    DataSchemaFromJSON,
    DataSchemaFromJSONTyped,
    DataSchemaToJSON,
    DataSchemaToJSONTyped,
} from './DataSchema';

/**
 * 
 * @export
 * @interface ColumnSchema
 */
export interface ColumnSchema {
    /**
     * 
     * @type {string}
     * @memberof ColumnSchema
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ColumnSchema
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ColumnSchema
     */
    dicId?: string;
    /**
     * 
     * @type {DataSchema}
     * @memberof ColumnSchema
     */
    dataSchema: DataSchema;
}

/**
 * Check if a given object implements the ColumnSchema interface.
 */
export function instanceOfColumnSchema(value: object): value is ColumnSchema {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('dataSchema' in value) || value['dataSchema'] === undefined) return false;
    return true;
}

export function ColumnSchemaFromJSON(json: any): ColumnSchema {
    return ColumnSchemaFromJSONTyped(json, false);
}

export function ColumnSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ColumnSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'dicId': json['dic_id'] == null ? undefined : json['dic_id'],
        'dataSchema': DataSchemaFromJSON(json['data_schema']),
    };
}

export function ColumnSchemaToJSON(json: any): ColumnSchema {
    return ColumnSchemaToJSONTyped(json, false);
}

export function ColumnSchemaToJSONTyped(value?: ColumnSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'dic_id': value['dicId'],
        'data_schema': DataSchemaToJSON(value['dataSchema']),
    };
}

