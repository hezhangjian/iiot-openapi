/* tslint:disable */
/* eslint-disable */
/**
 * IIoT OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ThingNode } from './ThingNode';
import {
    ThingNodeFromJSON,
    ThingNodeFromJSONTyped,
    ThingNodeToJSON,
    ThingNodeToJSONTyped,
} from './ThingNode';
import type { CatalogNode } from './CatalogNode';
import {
    CatalogNodeFromJSON,
    CatalogNodeFromJSONTyped,
    CatalogNodeToJSON,
    CatalogNodeToJSONTyped,
} from './CatalogNode';

/**
 * 
 * @export
 * @interface AddViewNodesReq
 */
export interface AddViewNodesReq {
    /**
     * 
     * @type {string}
     * @memberof AddViewNodesReq
     */
    parentId?: string;
    /**
     * 
     * @type {CatalogNode}
     * @memberof AddViewNodesReq
     */
    catalogNode?: CatalogNode;
    /**
     * 
     * @type {Array<ThingNode>}
     * @memberof AddViewNodesReq
     */
    thingNodes?: Array<ThingNode>;
}

/**
 * Check if a given object implements the AddViewNodesReq interface.
 */
export function instanceOfAddViewNodesReq(value: object): value is AddViewNodesReq {
    return true;
}

export function AddViewNodesReqFromJSON(json: any): AddViewNodesReq {
    return AddViewNodesReqFromJSONTyped(json, false);
}

export function AddViewNodesReqFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddViewNodesReq {
    if (json == null) {
        return json;
    }
    return {
        
        'parentId': json['parent_id'] == null ? undefined : json['parent_id'],
        'catalogNode': json['catalog_node'] == null ? undefined : CatalogNodeFromJSON(json['catalog_node']),
        'thingNodes': json['thing_nodes'] == null ? undefined : ((json['thing_nodes'] as Array<any>).map(ThingNodeFromJSON)),
    };
}

export function AddViewNodesReqToJSON(json: any): AddViewNodesReq {
    return AddViewNodesReqToJSONTyped(json, false);
}

export function AddViewNodesReqToJSONTyped(value?: AddViewNodesReq | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'parent_id': value['parentId'],
        'catalog_node': CatalogNodeToJSON(value['catalogNode']),
        'thing_nodes': value['thingNodes'] == null ? undefined : ((value['thingNodes'] as Array<any>).map(ThingNodeToJSON)),
    };
}

