/*
 * IIoT OpenAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertyDto {
    #[serde(rename = "property_id")]
    pub property_id: String,
    #[serde(rename = "property_name")]
    pub property_name: String,
    #[serde(rename = "data_schema")]
    pub data_schema: Box<models::DataSchema>,
    #[serde(rename = "writable", skip_serializing_if = "Option::is_none")]
    pub writable: Option<bool>,
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<String>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(rename = "ref_type", skip_serializing_if = "Option::is_none")]
    pub ref_type: Option<RefType>,
    #[serde(rename = "table_ref", skip_serializing_if = "Option::is_none")]
    pub table_ref: Option<Box<models::TableRef>>,
}

impl PropertyDto {
    pub fn new(property_id: String, property_name: String, data_schema: models::DataSchema) -> PropertyDto {
        PropertyDto {
            property_id,
            property_name,
            data_schema: Box::new(data_schema),
            writable: None,
            categories: None,
            description: None,
            unit: None,
            ref_type: None,
            table_ref: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RefType {
    #[serde(rename = "table")]
    Table,
    #[serde(rename = "point")]
    Point,
    #[serde(rename = "property")]
    Property,
}

impl Default for RefType {
    fn default() -> RefType {
        Self::Table
    }
}

