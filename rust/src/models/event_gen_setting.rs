/*
 * IIoT OpenAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventGenSetting {
    #[serde(rename = "start_trigger", skip_serializing_if = "Option::is_none")]
    pub start_trigger: Option<Box<models::EventTrigger>>,
    #[serde(rename = "end_trigger", skip_serializing_if = "Option::is_none")]
    pub end_trigger: Option<Box<models::EventTrigger>>,
    #[serde(rename = "expressions")]
    pub expressions: Vec<models::EventGenExpression>,
    #[serde(rename = "outputs", skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Box<models::EventGenOutput>>,
    #[serde(rename = "subevents", skip_serializing_if = "Option::is_none")]
    pub subevents: Option<Vec<models::SubEventGenSetting>>,
}

impl EventGenSetting {
    pub fn new(expressions: Vec<models::EventGenExpression>) -> EventGenSetting {
        EventGenSetting {
            start_trigger: None,
            end_trigger: None,
            expressions,
            outputs: None,
            subevents: None,
        }
    }
}

